generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model attendance {
  id           Int     @id @default(autoincrement())
  date         String
  time_in      String
  time_out     String?
  attendance_id String
  employee_id  String
  hours        Int?
  employee     employees @relation(fields: [employee_id], references: [employee_id])
}

model employees {
  id           Int       @id @default(autoincrement())
  employee_id  String    @unique
  name         String
  created_at   DateTime  @default(now())
  department   String
  position     String
  qrcode       String
  avatar       String?
  email        String    @unique
  phone_number String    @unique
  baseSalary   Int       @default(0) // Provide a default value
  totalSalary  Int       @default(0) // Provide a default value
  monthSalary  Int       @default(0) // Provide a default value
  password     String
  hierarchy    String    @default("employee") // Provide a default value
  day_off      Boolean?
  attendance   attendance[]
  leaveRequests leaveRequest[]
  payrolls     payroll[]
  smsNotifications smsNotification[] @relation("EmployeeRelation")
  phoneNumbers smsNotification[] @relation("PhoneNumberRelation")
  users        user[]
}

model leaveRequest {
  id                  Int       @id @default(autoincrement())
  employee_id         String?
  leave_type          String
  reason              String
  days_requested      Int
  department          String
  distribution_copy   Json
  email               String
  inclusive_dates     DateTime
  name                String
  person_to_takeover  String
  position            String
  requested_by        String
  supporting_document String
  to_date             DateTime
  created_at          DateTime  @default(now())
  status              LeaveRequestStatus @default(Pending)
  employee            employees? @relation(fields: [employee_id], references: [employee_id])
}

model payroll {
  id           Int     @id @default(autoincrement())
  payroll_id   String?
  employee_id  String
  hours_worked Float
  total_pay    Float
  created_at   DateTime @default(now())
  employee     employees @relation(fields: [employee_id], references: [employee_id])
}

model smsNotification {
  id            Int     @id @default(autoincrement())
  notification_id String
  employee_id   String
  phone_number  String
  message       String
  sent_date     DateTime @default(now())
  employee      employees @relation(fields: [employee_id], references: [employee_id], name: "EmployeeRelation")
  phoneNumber   employees @relation(fields: [phone_number], references: [phone_number], name: "PhoneNumberRelation")
}

model user {
  id          Int     @id @default(autoincrement())
  user_id     String  @unique
  email       String  @unique
  password    String
  employee_id String?
  employee    employees? @relation(fields: [employee_id], references: [employee_id])
}

enum RequestStatus {
  pending
  confirmed
  rejected
}

model employeeRequest {
  id          Int     @id @default(autoincrement())
  name        String
  email       String  @unique
  password    String
  phone_number String @unique
  status      RequestStatus @default(pending)
}

enum LeaveRequestStatus {
  Pending
  Process
  Approved
  Rejected
}