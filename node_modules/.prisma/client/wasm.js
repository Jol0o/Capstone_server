
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.19.1
 * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
 */
Prisma.prismaVersion = {
  client: "5.19.1",
  engine: "11f085a2012c0f4778414c8db2651556ee0ef959"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  position: 'position'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  time_in: 'time_in',
  time_out: 'time_out',
  attendance_id: 'attendance_id',
  employee_id: 'employee_id',
  hours: 'hours'
};

exports.Prisma.EmployeesScalarFieldEnum = {
  id: 'id',
  employee_id: 'employee_id',
  name: 'name',
  created_at: 'created_at',
  department: 'department',
  position: 'position',
  qrcode: 'qrcode',
  avatar: 'avatar',
  email: 'email',
  phone_number: 'phone_number',
  basicSalary: 'basicSalary',
  totalSalary: 'totalSalary',
  monthSalary: 'monthSalary',
  password: 'password',
  hierarchy: 'hierarchy',
  day_off: 'day_off',
  leaveCredits: 'leaveCredits'
};

exports.Prisma.LeaveRequestScalarFieldEnum = {
  id: 'id',
  employee_id: 'employee_id',
  leave_type: 'leave_type',
  reason: 'reason',
  days_requested: 'days_requested',
  department: 'department',
  distribution_copy: 'distribution_copy',
  email: 'email',
  inclusive_dates: 'inclusive_dates',
  name: 'name',
  person_to_takeover: 'person_to_takeover',
  position: 'position',
  requested_by: 'requested_by',
  supporting_document: 'supporting_document',
  approved_by: 'approved_by',
  received_by: 'received_by',
  department_head: 'department_head',
  hr_department: 'hr_department',
  date_of_approve: 'date_of_approve',
  date_of_received: 'date_of_received',
  recorded_by: 'recorded_by',
  withpay: 'withpay',
  to_date: 'to_date',
  created_at: 'created_at',
  status: 'status'
};

exports.Prisma.PayrollScalarFieldEnum = {
  id: 'id',
  payroll_id: 'payroll_id',
  employee_id: 'employee_id',
  hours_worked: 'hours_worked',
  total_pay: 'total_pay',
  created_at: 'created_at',
  period_start: 'period_start',
  period_end: 'period_end',
  absent: 'absent'
};

exports.Prisma.SmsNotificationScalarFieldEnum = {
  id: 'id',
  notification_id: 'notification_id',
  employee_id: 'employee_id',
  phone_number: 'phone_number',
  message: 'message',
  sent_date: 'sent_date'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  email: 'email',
  password: 'password',
  employee_id: 'employee_id'
};

exports.Prisma.EmployeeRequestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  phone_number: 'phone_number',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.adminOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  password: 'password',
  position: 'position'
};

exports.Prisma.attendanceOrderByRelevanceFieldEnum = {
  date: 'date',
  time_in: 'time_in',
  time_out: 'time_out',
  attendance_id: 'attendance_id',
  employee_id: 'employee_id'
};

exports.Prisma.employeesOrderByRelevanceFieldEnum = {
  employee_id: 'employee_id',
  name: 'name',
  department: 'department',
  position: 'position',
  qrcode: 'qrcode',
  avatar: 'avatar',
  email: 'email',
  phone_number: 'phone_number',
  password: 'password',
  hierarchy: 'hierarchy'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.leaveRequestOrderByRelevanceFieldEnum = {
  employee_id: 'employee_id',
  leave_type: 'leave_type',
  reason: 'reason',
  department: 'department',
  email: 'email',
  name: 'name',
  person_to_takeover: 'person_to_takeover',
  position: 'position',
  requested_by: 'requested_by',
  supporting_document: 'supporting_document',
  approved_by: 'approved_by',
  received_by: 'received_by',
  department_head: 'department_head',
  hr_department: 'hr_department',
  recorded_by: 'recorded_by'
};

exports.Prisma.payrollOrderByRelevanceFieldEnum = {
  payroll_id: 'payroll_id',
  employee_id: 'employee_id'
};

exports.Prisma.smsNotificationOrderByRelevanceFieldEnum = {
  notification_id: 'notification_id',
  employee_id: 'employee_id',
  phone_number: 'phone_number',
  message: 'message'
};

exports.Prisma.userOrderByRelevanceFieldEnum = {
  user_id: 'user_id',
  email: 'email',
  password: 'password',
  employee_id: 'employee_id'
};

exports.Prisma.employeeRequestOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  password: 'password',
  phone_number: 'phone_number'
};
exports.LeaveRequestStatus = exports.$Enums.LeaveRequestStatus = {
  Pending: 'Pending',
  Processing: 'Processing',
  Approved: 'Approved',
  Rejected: 'Rejected',
  Done: 'Done'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  rejected: 'rejected'
};

exports.Prisma.ModelName = {
  admin: 'admin',
  attendance: 'attendance',
  employees: 'employees',
  leaveRequest: 'leaveRequest',
  payroll: 'payroll',
  smsNotification: 'smsNotification',
  user: 'user',
  employeeRequest: 'employeeRequest'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
