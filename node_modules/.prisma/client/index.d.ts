
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model admin
 * 
 */
export type admin = $Result.DefaultSelection<Prisma.$adminPayload>
/**
 * Model attendance
 * 
 */
export type attendance = $Result.DefaultSelection<Prisma.$attendancePayload>
/**
 * Model employees
 * 
 */
export type employees = $Result.DefaultSelection<Prisma.$employeesPayload>
/**
 * Model leaveRequest
 * 
 */
export type leaveRequest = $Result.DefaultSelection<Prisma.$leaveRequestPayload>
/**
 * Model payroll
 * 
 */
export type payroll = $Result.DefaultSelection<Prisma.$payrollPayload>
/**
 * Model smsNotification
 * 
 */
export type smsNotification = $Result.DefaultSelection<Prisma.$smsNotificationPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model employeeRequest
 * 
 */
export type employeeRequest = $Result.DefaultSelection<Prisma.$employeeRequestPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const LeaveRequestStatus: {
  Pending: 'Pending',
  Processing: 'Processing',
  Approved: 'Approved',
  Rejected: 'Rejected',
  Done: 'Done'
};

export type LeaveRequestStatus = (typeof LeaveRequestStatus)[keyof typeof LeaveRequestStatus]


export const RequestStatus: {
  pending: 'pending',
  confirmed: 'confirmed',
  rejected: 'rejected'
};

export type RequestStatus = (typeof RequestStatus)[keyof typeof RequestStatus]

}

export type LeaveRequestStatus = $Enums.LeaveRequestStatus

export const LeaveRequestStatus: typeof $Enums.LeaveRequestStatus

export type RequestStatus = $Enums.RequestStatus

export const RequestStatus: typeof $Enums.RequestStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.adminDelegate<ExtArgs>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.attendanceDelegate<ExtArgs>;

  /**
   * `prisma.employees`: Exposes CRUD operations for the **employees** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employees
    * const employees = await prisma.employees.findMany()
    * ```
    */
  get employees(): Prisma.employeesDelegate<ExtArgs>;

  /**
   * `prisma.leaveRequest`: Exposes CRUD operations for the **leaveRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeaveRequests
    * const leaveRequests = await prisma.leaveRequest.findMany()
    * ```
    */
  get leaveRequest(): Prisma.leaveRequestDelegate<ExtArgs>;

  /**
   * `prisma.payroll`: Exposes CRUD operations for the **payroll** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payrolls
    * const payrolls = await prisma.payroll.findMany()
    * ```
    */
  get payroll(): Prisma.payrollDelegate<ExtArgs>;

  /**
   * `prisma.smsNotification`: Exposes CRUD operations for the **smsNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SmsNotifications
    * const smsNotifications = await prisma.smsNotification.findMany()
    * ```
    */
  get smsNotification(): Prisma.smsNotificationDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.employeeRequest`: Exposes CRUD operations for the **employeeRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmployeeRequests
    * const employeeRequests = await prisma.employeeRequest.findMany()
    * ```
    */
  get employeeRequest(): Prisma.employeeRequestDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.1
   * Query Engine version: 11f085a2012c0f4778414c8db2651556ee0ef959
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    admin: 'admin',
    attendance: 'attendance',
    employees: 'employees',
    leaveRequest: 'leaveRequest',
    payroll: 'payroll',
    smsNotification: 'smsNotification',
    user: 'user',
    employeeRequest: 'employeeRequest'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "admin" | "attendance" | "employees" | "leaveRequest" | "payroll" | "smsNotification" | "user" | "employeeRequest"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      admin: {
        payload: Prisma.$adminPayload<ExtArgs>
        fields: Prisma.adminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.adminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.adminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          findFirst: {
            args: Prisma.adminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.adminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          findMany: {
            args: Prisma.adminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>[]
          }
          create: {
            args: Prisma.adminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          createMany: {
            args: Prisma.adminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.adminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          update: {
            args: Prisma.adminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          deleteMany: {
            args: Prisma.adminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.adminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.adminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.adminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.adminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      attendance: {
        payload: Prisma.$attendancePayload<ExtArgs>
        fields: Prisma.attendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.attendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.attendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          findFirst: {
            args: Prisma.attendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.attendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          findMany: {
            args: Prisma.attendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>[]
          }
          create: {
            args: Prisma.attendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          createMany: {
            args: Prisma.attendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.attendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          update: {
            args: Prisma.attendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          deleteMany: {
            args: Prisma.attendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.attendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.attendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          aggregate: {
            args: Prisma.AttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendance>
          }
          groupBy: {
            args: Prisma.attendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.attendanceCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceCountAggregateOutputType> | number
          }
        }
      }
      employees: {
        payload: Prisma.$employeesPayload<ExtArgs>
        fields: Prisma.employeesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.employeesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.employeesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeesPayload>
          }
          findFirst: {
            args: Prisma.employeesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.employeesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeesPayload>
          }
          findMany: {
            args: Prisma.employeesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeesPayload>[]
          }
          create: {
            args: Prisma.employeesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeesPayload>
          }
          createMany: {
            args: Prisma.employeesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.employeesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeesPayload>
          }
          update: {
            args: Prisma.employeesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeesPayload>
          }
          deleteMany: {
            args: Prisma.employeesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.employeesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.employeesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeesPayload>
          }
          aggregate: {
            args: Prisma.EmployeesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployees>
          }
          groupBy: {
            args: Prisma.employeesGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeesGroupByOutputType>[]
          }
          count: {
            args: Prisma.employeesCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeesCountAggregateOutputType> | number
          }
        }
      }
      leaveRequest: {
        payload: Prisma.$leaveRequestPayload<ExtArgs>
        fields: Prisma.leaveRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.leaveRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leaveRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.leaveRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leaveRequestPayload>
          }
          findFirst: {
            args: Prisma.leaveRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leaveRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.leaveRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leaveRequestPayload>
          }
          findMany: {
            args: Prisma.leaveRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leaveRequestPayload>[]
          }
          create: {
            args: Prisma.leaveRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leaveRequestPayload>
          }
          createMany: {
            args: Prisma.leaveRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.leaveRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leaveRequestPayload>
          }
          update: {
            args: Prisma.leaveRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leaveRequestPayload>
          }
          deleteMany: {
            args: Prisma.leaveRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.leaveRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.leaveRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$leaveRequestPayload>
          }
          aggregate: {
            args: Prisma.LeaveRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeaveRequest>
          }
          groupBy: {
            args: Prisma.leaveRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.leaveRequestCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveRequestCountAggregateOutputType> | number
          }
        }
      }
      payroll: {
        payload: Prisma.$payrollPayload<ExtArgs>
        fields: Prisma.payrollFieldRefs
        operations: {
          findUnique: {
            args: Prisma.payrollFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payrollPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.payrollFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payrollPayload>
          }
          findFirst: {
            args: Prisma.payrollFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payrollPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.payrollFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payrollPayload>
          }
          findMany: {
            args: Prisma.payrollFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payrollPayload>[]
          }
          create: {
            args: Prisma.payrollCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payrollPayload>
          }
          createMany: {
            args: Prisma.payrollCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.payrollDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payrollPayload>
          }
          update: {
            args: Prisma.payrollUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payrollPayload>
          }
          deleteMany: {
            args: Prisma.payrollDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.payrollUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.payrollUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$payrollPayload>
          }
          aggregate: {
            args: Prisma.PayrollAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayroll>
          }
          groupBy: {
            args: Prisma.payrollGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayrollGroupByOutputType>[]
          }
          count: {
            args: Prisma.payrollCountArgs<ExtArgs>
            result: $Utils.Optional<PayrollCountAggregateOutputType> | number
          }
        }
      }
      smsNotification: {
        payload: Prisma.$smsNotificationPayload<ExtArgs>
        fields: Prisma.smsNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.smsNotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$smsNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.smsNotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$smsNotificationPayload>
          }
          findFirst: {
            args: Prisma.smsNotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$smsNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.smsNotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$smsNotificationPayload>
          }
          findMany: {
            args: Prisma.smsNotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$smsNotificationPayload>[]
          }
          create: {
            args: Prisma.smsNotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$smsNotificationPayload>
          }
          createMany: {
            args: Prisma.smsNotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.smsNotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$smsNotificationPayload>
          }
          update: {
            args: Prisma.smsNotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$smsNotificationPayload>
          }
          deleteMany: {
            args: Prisma.smsNotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.smsNotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.smsNotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$smsNotificationPayload>
          }
          aggregate: {
            args: Prisma.SmsNotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSmsNotification>
          }
          groupBy: {
            args: Prisma.smsNotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<SmsNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.smsNotificationCountArgs<ExtArgs>
            result: $Utils.Optional<SmsNotificationCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      employeeRequest: {
        payload: Prisma.$employeeRequestPayload<ExtArgs>
        fields: Prisma.employeeRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.employeeRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeeRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.employeeRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeeRequestPayload>
          }
          findFirst: {
            args: Prisma.employeeRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeeRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.employeeRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeeRequestPayload>
          }
          findMany: {
            args: Prisma.employeeRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeeRequestPayload>[]
          }
          create: {
            args: Prisma.employeeRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeeRequestPayload>
          }
          createMany: {
            args: Prisma.employeeRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.employeeRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeeRequestPayload>
          }
          update: {
            args: Prisma.employeeRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeeRequestPayload>
          }
          deleteMany: {
            args: Prisma.employeeRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.employeeRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.employeeRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$employeeRequestPayload>
          }
          aggregate: {
            args: Prisma.EmployeeRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployeeRequest>
          }
          groupBy: {
            args: Prisma.employeeRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployeeRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.employeeRequestCountArgs<ExtArgs>
            result: $Utils.Optional<EmployeeRequestCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EmployeesCountOutputType
   */

  export type EmployeesCountOutputType = {
    attendance: number
    leaveRequests: number
    payrolls: number
    smsNotifications: number
    phoneNumbers: number
    users: number
  }

  export type EmployeesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendance?: boolean | EmployeesCountOutputTypeCountAttendanceArgs
    leaveRequests?: boolean | EmployeesCountOutputTypeCountLeaveRequestsArgs
    payrolls?: boolean | EmployeesCountOutputTypeCountPayrollsArgs
    smsNotifications?: boolean | EmployeesCountOutputTypeCountSmsNotificationsArgs
    phoneNumbers?: boolean | EmployeesCountOutputTypeCountPhoneNumbersArgs
    users?: boolean | EmployeesCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * EmployeesCountOutputType without action
   */
  export type EmployeesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployeesCountOutputType
     */
    select?: EmployeesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployeesCountOutputType without action
   */
  export type EmployeesCountOutputTypeCountAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attendanceWhereInput
  }

  /**
   * EmployeesCountOutputType without action
   */
  export type EmployeesCountOutputTypeCountLeaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: leaveRequestWhereInput
  }

  /**
   * EmployeesCountOutputType without action
   */
  export type EmployeesCountOutputTypeCountPayrollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payrollWhereInput
  }

  /**
   * EmployeesCountOutputType without action
   */
  export type EmployeesCountOutputTypeCountSmsNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: smsNotificationWhereInput
  }

  /**
   * EmployeesCountOutputType without action
   */
  export type EmployeesCountOutputTypeCountPhoneNumbersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: smsNotificationWhereInput
  }

  /**
   * EmployeesCountOutputType without action
   */
  export type EmployeesCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
  }


  /**
   * Models
   */

  /**
   * Model admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    id: number | null
  }

  export type AdminSumAggregateOutputType = {
    id: number | null
  }

  export type AdminMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    position: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    position: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    position: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    id?: true
  }

  export type AdminSumAggregateInputType = {
    id?: true
  }

  export type AdminMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    position?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    position?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    position?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which admin to aggregate.
     */
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminOrderByWithRelationInput | adminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type adminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: adminWhereInput
    orderBy?: adminOrderByWithAggregationInput | adminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: adminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    position: string | null
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends adminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type adminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    position?: boolean
  }, ExtArgs["result"]["admin"]>


  export type adminSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    position?: boolean
  }


  export type $adminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      position: string | null
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type adminGetPayload<S extends boolean | null | undefined | adminDefaultArgs> = $Result.GetResult<Prisma.$adminPayload, S>

  type adminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<adminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface adminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['admin'], meta: { name: 'admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {adminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends adminFindUniqueArgs>(args: SelectSubset<T, adminFindUniqueArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {adminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends adminFindUniqueOrThrowArgs>(args: SelectSubset<T, adminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends adminFindFirstArgs>(args?: SelectSubset<T, adminFindFirstArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends adminFindFirstOrThrowArgs>(args?: SelectSubset<T, adminFindFirstOrThrowArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends adminFindManyArgs>(args?: SelectSubset<T, adminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Admin.
     * @param {adminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends adminCreateArgs>(args: SelectSubset<T, adminCreateArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Admins.
     * @param {adminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends adminCreateManyArgs>(args?: SelectSubset<T, adminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {adminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends adminDeleteArgs>(args: SelectSubset<T, adminDeleteArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {adminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends adminUpdateArgs>(args: SelectSubset<T, adminUpdateArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {adminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends adminDeleteManyArgs>(args?: SelectSubset<T, adminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends adminUpdateManyArgs>(args: SelectSubset<T, adminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {adminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends adminUpsertArgs>(args: SelectSubset<T, adminUpsertArgs<ExtArgs>>): Prisma__adminClient<$Result.GetResult<Prisma.$adminPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends adminCountArgs>(
      args?: Subset<T, adminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends adminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: adminGroupByArgs['orderBy'] }
        : { orderBy?: adminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, adminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the admin model
   */
  readonly fields: adminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__adminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the admin model
   */ 
  interface adminFieldRefs {
    readonly id: FieldRef<"admin", 'Int'>
    readonly name: FieldRef<"admin", 'String'>
    readonly email: FieldRef<"admin", 'String'>
    readonly password: FieldRef<"admin", 'String'>
    readonly position: FieldRef<"admin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * admin findUnique
   */
  export type adminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Filter, which admin to fetch.
     */
    where: adminWhereUniqueInput
  }

  /**
   * admin findUniqueOrThrow
   */
  export type adminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Filter, which admin to fetch.
     */
    where: adminWhereUniqueInput
  }

  /**
   * admin findFirst
   */
  export type adminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Filter, which admin to fetch.
     */
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminOrderByWithRelationInput | adminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for admins.
     */
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * admin findFirstOrThrow
   */
  export type adminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Filter, which admin to fetch.
     */
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminOrderByWithRelationInput | adminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for admins.
     */
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * admin findMany
   */
  export type adminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Filter, which admins to fetch.
     */
    where?: adminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of admins to fetch.
     */
    orderBy?: adminOrderByWithRelationInput | adminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing admins.
     */
    cursor?: adminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * admin create
   */
  export type adminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * The data needed to create a admin.
     */
    data: XOR<adminCreateInput, adminUncheckedCreateInput>
  }

  /**
   * admin createMany
   */
  export type adminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many admins.
     */
    data: adminCreateManyInput | adminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * admin update
   */
  export type adminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * The data needed to update a admin.
     */
    data: XOR<adminUpdateInput, adminUncheckedUpdateInput>
    /**
     * Choose, which admin to update.
     */
    where: adminWhereUniqueInput
  }

  /**
   * admin updateMany
   */
  export type adminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update admins.
     */
    data: XOR<adminUpdateManyMutationInput, adminUncheckedUpdateManyInput>
    /**
     * Filter which admins to update
     */
    where?: adminWhereInput
  }

  /**
   * admin upsert
   */
  export type adminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * The filter to search for the admin to update in case it exists.
     */
    where: adminWhereUniqueInput
    /**
     * In case the admin found by the `where` argument doesn't exist, create a new admin with this data.
     */
    create: XOR<adminCreateInput, adminUncheckedCreateInput>
    /**
     * In case the admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<adminUpdateInput, adminUncheckedUpdateInput>
  }

  /**
   * admin delete
   */
  export type adminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
    /**
     * Filter which admin to delete.
     */
    where: adminWhereUniqueInput
  }

  /**
   * admin deleteMany
   */
  export type adminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which admins to delete
     */
    where?: adminWhereInput
  }

  /**
   * admin without action
   */
  export type adminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the admin
     */
    select?: adminSelect<ExtArgs> | null
  }


  /**
   * Model attendance
   */

  export type AggregateAttendance = {
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  export type AttendanceAvgAggregateOutputType = {
    id: number | null
    hours: number | null
  }

  export type AttendanceSumAggregateOutputType = {
    id: number | null
    hours: number | null
  }

  export type AttendanceMinAggregateOutputType = {
    id: number | null
    date: string | null
    time_in: string | null
    time_out: string | null
    attendance_id: string | null
    employee_id: string | null
    hours: number | null
  }

  export type AttendanceMaxAggregateOutputType = {
    id: number | null
    date: string | null
    time_in: string | null
    time_out: string | null
    attendance_id: string | null
    employee_id: string | null
    hours: number | null
  }

  export type AttendanceCountAggregateOutputType = {
    id: number
    date: number
    time_in: number
    time_out: number
    attendance_id: number
    employee_id: number
    hours: number
    _all: number
  }


  export type AttendanceAvgAggregateInputType = {
    id?: true
    hours?: true
  }

  export type AttendanceSumAggregateInputType = {
    id?: true
    hours?: true
  }

  export type AttendanceMinAggregateInputType = {
    id?: true
    date?: true
    time_in?: true
    time_out?: true
    attendance_id?: true
    employee_id?: true
    hours?: true
  }

  export type AttendanceMaxAggregateInputType = {
    id?: true
    date?: true
    time_in?: true
    time_out?: true
    attendance_id?: true
    employee_id?: true
    hours?: true
  }

  export type AttendanceCountAggregateInputType = {
    id?: true
    date?: true
    time_in?: true
    time_out?: true
    attendance_id?: true
    employee_id?: true
    hours?: true
    _all?: true
  }

  export type AttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which attendance to aggregate.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned attendances
    **/
    _count?: true | AttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceMaxAggregateInputType
  }

  export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance[P]>
      : GetScalarType<T[P], AggregateAttendance[P]>
  }




  export type attendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attendanceWhereInput
    orderBy?: attendanceOrderByWithAggregationInput | attendanceOrderByWithAggregationInput[]
    by: AttendanceScalarFieldEnum[] | AttendanceScalarFieldEnum
    having?: attendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceCountAggregateInputType | true
    _avg?: AttendanceAvgAggregateInputType
    _sum?: AttendanceSumAggregateInputType
    _min?: AttendanceMinAggregateInputType
    _max?: AttendanceMaxAggregateInputType
  }

  export type AttendanceGroupByOutputType = {
    id: number
    date: string
    time_in: string
    time_out: string | null
    attendance_id: string
    employee_id: string
    hours: number | null
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  type GetAttendanceGroupByPayload<T extends attendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
        }
      >
    >


  export type attendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    time_in?: boolean
    time_out?: boolean
    attendance_id?: boolean
    employee_id?: boolean
    hours?: boolean
    employee?: boolean | employeesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>


  export type attendanceSelectScalar = {
    id?: boolean
    date?: boolean
    time_in?: boolean
    time_out?: boolean
    attendance_id?: boolean
    employee_id?: boolean
    hours?: boolean
  }

  export type attendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | employeesDefaultArgs<ExtArgs>
  }

  export type $attendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "attendance"
    objects: {
      employee: Prisma.$employeesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: string
      time_in: string
      time_out: string | null
      attendance_id: string
      employee_id: string
      hours: number | null
    }, ExtArgs["result"]["attendance"]>
    composites: {}
  }

  type attendanceGetPayload<S extends boolean | null | undefined | attendanceDefaultArgs> = $Result.GetResult<Prisma.$attendancePayload, S>

  type attendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<attendanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttendanceCountAggregateInputType | true
    }

  export interface attendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['attendance'], meta: { name: 'attendance' } }
    /**
     * Find zero or one Attendance that matches the filter.
     * @param {attendanceFindUniqueArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends attendanceFindUniqueArgs>(args: SelectSubset<T, attendanceFindUniqueArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Attendance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {attendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends attendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, attendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Attendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindFirstArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends attendanceFindFirstArgs>(args?: SelectSubset<T, attendanceFindFirstArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Attendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends attendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, attendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Attendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendances
     * const attendances = await prisma.attendance.findMany()
     * 
     * // Get first 10 Attendances
     * const attendances = await prisma.attendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceWithIdOnly = await prisma.attendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends attendanceFindManyArgs>(args?: SelectSubset<T, attendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Attendance.
     * @param {attendanceCreateArgs} args - Arguments to create a Attendance.
     * @example
     * // Create one Attendance
     * const Attendance = await prisma.attendance.create({
     *   data: {
     *     // ... data to create a Attendance
     *   }
     * })
     * 
     */
    create<T extends attendanceCreateArgs>(args: SelectSubset<T, attendanceCreateArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Attendances.
     * @param {attendanceCreateManyArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends attendanceCreateManyArgs>(args?: SelectSubset<T, attendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Attendance.
     * @param {attendanceDeleteArgs} args - Arguments to delete one Attendance.
     * @example
     * // Delete one Attendance
     * const Attendance = await prisma.attendance.delete({
     *   where: {
     *     // ... filter to delete one Attendance
     *   }
     * })
     * 
     */
    delete<T extends attendanceDeleteArgs>(args: SelectSubset<T, attendanceDeleteArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Attendance.
     * @param {attendanceUpdateArgs} args - Arguments to update one Attendance.
     * @example
     * // Update one Attendance
     * const attendance = await prisma.attendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends attendanceUpdateArgs>(args: SelectSubset<T, attendanceUpdateArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Attendances.
     * @param {attendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
     * @example
     * // Delete a few Attendances
     * const { count } = await prisma.attendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends attendanceDeleteManyArgs>(args?: SelectSubset<T, attendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends attendanceUpdateManyArgs>(args: SelectSubset<T, attendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attendance.
     * @param {attendanceUpsertArgs} args - Arguments to update or create a Attendance.
     * @example
     * // Update or create a Attendance
     * const attendance = await prisma.attendance.upsert({
     *   create: {
     *     // ... data to create a Attendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance we want to update
     *   }
     * })
     */
    upsert<T extends attendanceUpsertArgs>(args: SelectSubset<T, attendanceUpsertArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceCountArgs} args - Arguments to filter Attendances to count.
     * @example
     * // Count the number of Attendances
     * const count = await prisma.attendance.count({
     *   where: {
     *     // ... the filter for the Attendances we want to count
     *   }
     * })
    **/
    count<T extends attendanceCountArgs>(
      args?: Subset<T, attendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceAggregateArgs>(args: Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

    /**
     * Group by Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends attendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: attendanceGroupByArgs['orderBy'] }
        : { orderBy?: attendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, attendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the attendance model
   */
  readonly fields: attendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for attendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__attendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends employeesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, employeesDefaultArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the attendance model
   */ 
  interface attendanceFieldRefs {
    readonly id: FieldRef<"attendance", 'Int'>
    readonly date: FieldRef<"attendance", 'String'>
    readonly time_in: FieldRef<"attendance", 'String'>
    readonly time_out: FieldRef<"attendance", 'String'>
    readonly attendance_id: FieldRef<"attendance", 'String'>
    readonly employee_id: FieldRef<"attendance", 'String'>
    readonly hours: FieldRef<"attendance", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * attendance findUnique
   */
  export type attendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance findUniqueOrThrow
   */
  export type attendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance findFirst
   */
  export type attendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance findFirstOrThrow
   */
  export type attendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance findMany
   */
  export type attendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendances to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance create
   */
  export type attendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a attendance.
     */
    data: XOR<attendanceCreateInput, attendanceUncheckedCreateInput>
  }

  /**
   * attendance createMany
   */
  export type attendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many attendances.
     */
    data: attendanceCreateManyInput | attendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * attendance update
   */
  export type attendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a attendance.
     */
    data: XOR<attendanceUpdateInput, attendanceUncheckedUpdateInput>
    /**
     * Choose, which attendance to update.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance updateMany
   */
  export type attendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update attendances.
     */
    data: XOR<attendanceUpdateManyMutationInput, attendanceUncheckedUpdateManyInput>
    /**
     * Filter which attendances to update
     */
    where?: attendanceWhereInput
  }

  /**
   * attendance upsert
   */
  export type attendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the attendance to update in case it exists.
     */
    where: attendanceWhereUniqueInput
    /**
     * In case the attendance found by the `where` argument doesn't exist, create a new attendance with this data.
     */
    create: XOR<attendanceCreateInput, attendanceUncheckedCreateInput>
    /**
     * In case the attendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<attendanceUpdateInput, attendanceUncheckedUpdateInput>
  }

  /**
   * attendance delete
   */
  export type attendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter which attendance to delete.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance deleteMany
   */
  export type attendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which attendances to delete
     */
    where?: attendanceWhereInput
  }

  /**
   * attendance without action
   */
  export type attendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
  }


  /**
   * Model employees
   */

  export type AggregateEmployees = {
    _count: EmployeesCountAggregateOutputType | null
    _avg: EmployeesAvgAggregateOutputType | null
    _sum: EmployeesSumAggregateOutputType | null
    _min: EmployeesMinAggregateOutputType | null
    _max: EmployeesMaxAggregateOutputType | null
  }

  export type EmployeesAvgAggregateOutputType = {
    id: number | null
    basicSalary: number | null
    totalSalary: number | null
    monthSalary: number | null
    leaveCredits: number | null
  }

  export type EmployeesSumAggregateOutputType = {
    id: number | null
    basicSalary: number | null
    totalSalary: number | null
    monthSalary: number | null
    leaveCredits: number | null
  }

  export type EmployeesMinAggregateOutputType = {
    id: number | null
    employee_id: string | null
    name: string | null
    created_at: Date | null
    department: string | null
    position: string | null
    qrcode: string | null
    avatar: string | null
    email: string | null
    phone_number: string | null
    basicSalary: number | null
    totalSalary: number | null
    monthSalary: number | null
    password: string | null
    hierarchy: string | null
    day_off: boolean | null
    leaveCredits: number | null
  }

  export type EmployeesMaxAggregateOutputType = {
    id: number | null
    employee_id: string | null
    name: string | null
    created_at: Date | null
    department: string | null
    position: string | null
    qrcode: string | null
    avatar: string | null
    email: string | null
    phone_number: string | null
    basicSalary: number | null
    totalSalary: number | null
    monthSalary: number | null
    password: string | null
    hierarchy: string | null
    day_off: boolean | null
    leaveCredits: number | null
  }

  export type EmployeesCountAggregateOutputType = {
    id: number
    employee_id: number
    name: number
    created_at: number
    department: number
    position: number
    qrcode: number
    avatar: number
    email: number
    phone_number: number
    basicSalary: number
    totalSalary: number
    monthSalary: number
    password: number
    hierarchy: number
    day_off: number
    leaveCredits: number
    _all: number
  }


  export type EmployeesAvgAggregateInputType = {
    id?: true
    basicSalary?: true
    totalSalary?: true
    monthSalary?: true
    leaveCredits?: true
  }

  export type EmployeesSumAggregateInputType = {
    id?: true
    basicSalary?: true
    totalSalary?: true
    monthSalary?: true
    leaveCredits?: true
  }

  export type EmployeesMinAggregateInputType = {
    id?: true
    employee_id?: true
    name?: true
    created_at?: true
    department?: true
    position?: true
    qrcode?: true
    avatar?: true
    email?: true
    phone_number?: true
    basicSalary?: true
    totalSalary?: true
    monthSalary?: true
    password?: true
    hierarchy?: true
    day_off?: true
    leaveCredits?: true
  }

  export type EmployeesMaxAggregateInputType = {
    id?: true
    employee_id?: true
    name?: true
    created_at?: true
    department?: true
    position?: true
    qrcode?: true
    avatar?: true
    email?: true
    phone_number?: true
    basicSalary?: true
    totalSalary?: true
    monthSalary?: true
    password?: true
    hierarchy?: true
    day_off?: true
    leaveCredits?: true
  }

  export type EmployeesCountAggregateInputType = {
    id?: true
    employee_id?: true
    name?: true
    created_at?: true
    department?: true
    position?: true
    qrcode?: true
    avatar?: true
    email?: true
    phone_number?: true
    basicSalary?: true
    totalSalary?: true
    monthSalary?: true
    password?: true
    hierarchy?: true
    day_off?: true
    leaveCredits?: true
    _all?: true
  }

  export type EmployeesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which employees to aggregate.
     */
    where?: employeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employees to fetch.
     */
    orderBy?: employeesOrderByWithRelationInput | employeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: employeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned employees
    **/
    _count?: true | EmployeesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeesMaxAggregateInputType
  }

  export type GetEmployeesAggregateType<T extends EmployeesAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployees]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployees[P]>
      : GetScalarType<T[P], AggregateEmployees[P]>
  }




  export type employeesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: employeesWhereInput
    orderBy?: employeesOrderByWithAggregationInput | employeesOrderByWithAggregationInput[]
    by: EmployeesScalarFieldEnum[] | EmployeesScalarFieldEnum
    having?: employeesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeesCountAggregateInputType | true
    _avg?: EmployeesAvgAggregateInputType
    _sum?: EmployeesSumAggregateInputType
    _min?: EmployeesMinAggregateInputType
    _max?: EmployeesMaxAggregateInputType
  }

  export type EmployeesGroupByOutputType = {
    id: number
    employee_id: string
    name: string
    created_at: Date
    department: string
    position: string
    qrcode: string
    avatar: string | null
    email: string
    phone_number: string
    basicSalary: number
    totalSalary: number
    monthSalary: number
    password: string
    hierarchy: string
    day_off: boolean | null
    leaveCredits: number
    _count: EmployeesCountAggregateOutputType | null
    _avg: EmployeesAvgAggregateOutputType | null
    _sum: EmployeesSumAggregateOutputType | null
    _min: EmployeesMinAggregateOutputType | null
    _max: EmployeesMaxAggregateOutputType | null
  }

  type GetEmployeesGroupByPayload<T extends employeesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeesGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeesGroupByOutputType[P]>
        }
      >
    >


  export type employeesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employee_id?: boolean
    name?: boolean
    created_at?: boolean
    department?: boolean
    position?: boolean
    qrcode?: boolean
    avatar?: boolean
    email?: boolean
    phone_number?: boolean
    basicSalary?: boolean
    totalSalary?: boolean
    monthSalary?: boolean
    password?: boolean
    hierarchy?: boolean
    day_off?: boolean
    leaveCredits?: boolean
    attendance?: boolean | employees$attendanceArgs<ExtArgs>
    leaveRequests?: boolean | employees$leaveRequestsArgs<ExtArgs>
    payrolls?: boolean | employees$payrollsArgs<ExtArgs>
    smsNotifications?: boolean | employees$smsNotificationsArgs<ExtArgs>
    phoneNumbers?: boolean | employees$phoneNumbersArgs<ExtArgs>
    users?: boolean | employees$usersArgs<ExtArgs>
    _count?: boolean | EmployeesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employees"]>


  export type employeesSelectScalar = {
    id?: boolean
    employee_id?: boolean
    name?: boolean
    created_at?: boolean
    department?: boolean
    position?: boolean
    qrcode?: boolean
    avatar?: boolean
    email?: boolean
    phone_number?: boolean
    basicSalary?: boolean
    totalSalary?: boolean
    monthSalary?: boolean
    password?: boolean
    hierarchy?: boolean
    day_off?: boolean
    leaveCredits?: boolean
  }

  export type employeesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendance?: boolean | employees$attendanceArgs<ExtArgs>
    leaveRequests?: boolean | employees$leaveRequestsArgs<ExtArgs>
    payrolls?: boolean | employees$payrollsArgs<ExtArgs>
    smsNotifications?: boolean | employees$smsNotificationsArgs<ExtArgs>
    phoneNumbers?: boolean | employees$phoneNumbersArgs<ExtArgs>
    users?: boolean | employees$usersArgs<ExtArgs>
    _count?: boolean | EmployeesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $employeesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "employees"
    objects: {
      attendance: Prisma.$attendancePayload<ExtArgs>[]
      leaveRequests: Prisma.$leaveRequestPayload<ExtArgs>[]
      payrolls: Prisma.$payrollPayload<ExtArgs>[]
      smsNotifications: Prisma.$smsNotificationPayload<ExtArgs>[]
      phoneNumbers: Prisma.$smsNotificationPayload<ExtArgs>[]
      users: Prisma.$userPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employee_id: string
      name: string
      created_at: Date
      department: string
      position: string
      qrcode: string
      avatar: string | null
      email: string
      phone_number: string
      basicSalary: number
      totalSalary: number
      monthSalary: number
      password: string
      hierarchy: string
      day_off: boolean | null
      leaveCredits: number
    }, ExtArgs["result"]["employees"]>
    composites: {}
  }

  type employeesGetPayload<S extends boolean | null | undefined | employeesDefaultArgs> = $Result.GetResult<Prisma.$employeesPayload, S>

  type employeesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<employeesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeesCountAggregateInputType | true
    }

  export interface employeesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['employees'], meta: { name: 'employees' } }
    /**
     * Find zero or one Employees that matches the filter.
     * @param {employeesFindUniqueArgs} args - Arguments to find a Employees
     * @example
     * // Get one Employees
     * const employees = await prisma.employees.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends employeesFindUniqueArgs>(args: SelectSubset<T, employeesFindUniqueArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Employees that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {employeesFindUniqueOrThrowArgs} args - Arguments to find a Employees
     * @example
     * // Get one Employees
     * const employees = await prisma.employees.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends employeesFindUniqueOrThrowArgs>(args: SelectSubset<T, employeesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeesFindFirstArgs} args - Arguments to find a Employees
     * @example
     * // Get one Employees
     * const employees = await prisma.employees.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends employeesFindFirstArgs>(args?: SelectSubset<T, employeesFindFirstArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Employees that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeesFindFirstOrThrowArgs} args - Arguments to find a Employees
     * @example
     * // Get one Employees
     * const employees = await prisma.employees.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends employeesFindFirstOrThrowArgs>(args?: SelectSubset<T, employeesFindFirstOrThrowArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Employees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employees
     * const employees = await prisma.employees.findMany()
     * 
     * // Get first 10 Employees
     * const employees = await prisma.employees.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeesWithIdOnly = await prisma.employees.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends employeesFindManyArgs>(args?: SelectSubset<T, employeesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Employees.
     * @param {employeesCreateArgs} args - Arguments to create a Employees.
     * @example
     * // Create one Employees
     * const Employees = await prisma.employees.create({
     *   data: {
     *     // ... data to create a Employees
     *   }
     * })
     * 
     */
    create<T extends employeesCreateArgs>(args: SelectSubset<T, employeesCreateArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Employees.
     * @param {employeesCreateManyArgs} args - Arguments to create many Employees.
     * @example
     * // Create many Employees
     * const employees = await prisma.employees.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends employeesCreateManyArgs>(args?: SelectSubset<T, employeesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Employees.
     * @param {employeesDeleteArgs} args - Arguments to delete one Employees.
     * @example
     * // Delete one Employees
     * const Employees = await prisma.employees.delete({
     *   where: {
     *     // ... filter to delete one Employees
     *   }
     * })
     * 
     */
    delete<T extends employeesDeleteArgs>(args: SelectSubset<T, employeesDeleteArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Employees.
     * @param {employeesUpdateArgs} args - Arguments to update one Employees.
     * @example
     * // Update one Employees
     * const employees = await prisma.employees.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends employeesUpdateArgs>(args: SelectSubset<T, employeesUpdateArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Employees.
     * @param {employeesDeleteManyArgs} args - Arguments to filter Employees to delete.
     * @example
     * // Delete a few Employees
     * const { count } = await prisma.employees.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends employeesDeleteManyArgs>(args?: SelectSubset<T, employeesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employees
     * const employees = await prisma.employees.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends employeesUpdateManyArgs>(args: SelectSubset<T, employeesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employees.
     * @param {employeesUpsertArgs} args - Arguments to update or create a Employees.
     * @example
     * // Update or create a Employees
     * const employees = await prisma.employees.upsert({
     *   create: {
     *     // ... data to create a Employees
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employees we want to update
     *   }
     * })
     */
    upsert<T extends employeesUpsertArgs>(args: SelectSubset<T, employeesUpsertArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeesCountArgs} args - Arguments to filter Employees to count.
     * @example
     * // Count the number of Employees
     * const count = await prisma.employees.count({
     *   where: {
     *     // ... the filter for the Employees we want to count
     *   }
     * })
    **/
    count<T extends employeesCountArgs>(
      args?: Subset<T, employeesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeesAggregateArgs>(args: Subset<T, EmployeesAggregateArgs>): Prisma.PrismaPromise<GetEmployeesAggregateType<T>>

    /**
     * Group by Employees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends employeesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: employeesGroupByArgs['orderBy'] }
        : { orderBy?: employeesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, employeesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the employees model
   */
  readonly fields: employeesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for employees.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__employeesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attendance<T extends employees$attendanceArgs<ExtArgs> = {}>(args?: Subset<T, employees$attendanceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findMany"> | Null>
    leaveRequests<T extends employees$leaveRequestsArgs<ExtArgs> = {}>(args?: Subset<T, employees$leaveRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$leaveRequestPayload<ExtArgs>, T, "findMany"> | Null>
    payrolls<T extends employees$payrollsArgs<ExtArgs> = {}>(args?: Subset<T, employees$payrollsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payrollPayload<ExtArgs>, T, "findMany"> | Null>
    smsNotifications<T extends employees$smsNotificationsArgs<ExtArgs> = {}>(args?: Subset<T, employees$smsNotificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$smsNotificationPayload<ExtArgs>, T, "findMany"> | Null>
    phoneNumbers<T extends employees$phoneNumbersArgs<ExtArgs> = {}>(args?: Subset<T, employees$phoneNumbersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$smsNotificationPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends employees$usersArgs<ExtArgs> = {}>(args?: Subset<T, employees$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the employees model
   */ 
  interface employeesFieldRefs {
    readonly id: FieldRef<"employees", 'Int'>
    readonly employee_id: FieldRef<"employees", 'String'>
    readonly name: FieldRef<"employees", 'String'>
    readonly created_at: FieldRef<"employees", 'DateTime'>
    readonly department: FieldRef<"employees", 'String'>
    readonly position: FieldRef<"employees", 'String'>
    readonly qrcode: FieldRef<"employees", 'String'>
    readonly avatar: FieldRef<"employees", 'String'>
    readonly email: FieldRef<"employees", 'String'>
    readonly phone_number: FieldRef<"employees", 'String'>
    readonly basicSalary: FieldRef<"employees", 'Int'>
    readonly totalSalary: FieldRef<"employees", 'Int'>
    readonly monthSalary: FieldRef<"employees", 'Int'>
    readonly password: FieldRef<"employees", 'String'>
    readonly hierarchy: FieldRef<"employees", 'String'>
    readonly day_off: FieldRef<"employees", 'Boolean'>
    readonly leaveCredits: FieldRef<"employees", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * employees findUnique
   */
  export type employeesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employeesInclude<ExtArgs> | null
    /**
     * Filter, which employees to fetch.
     */
    where: employeesWhereUniqueInput
  }

  /**
   * employees findUniqueOrThrow
   */
  export type employeesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employeesInclude<ExtArgs> | null
    /**
     * Filter, which employees to fetch.
     */
    where: employeesWhereUniqueInput
  }

  /**
   * employees findFirst
   */
  export type employeesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employeesInclude<ExtArgs> | null
    /**
     * Filter, which employees to fetch.
     */
    where?: employeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employees to fetch.
     */
    orderBy?: employeesOrderByWithRelationInput | employeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for employees.
     */
    cursor?: employeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of employees.
     */
    distinct?: EmployeesScalarFieldEnum | EmployeesScalarFieldEnum[]
  }

  /**
   * employees findFirstOrThrow
   */
  export type employeesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employeesInclude<ExtArgs> | null
    /**
     * Filter, which employees to fetch.
     */
    where?: employeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employees to fetch.
     */
    orderBy?: employeesOrderByWithRelationInput | employeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for employees.
     */
    cursor?: employeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of employees.
     */
    distinct?: EmployeesScalarFieldEnum | EmployeesScalarFieldEnum[]
  }

  /**
   * employees findMany
   */
  export type employeesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employeesInclude<ExtArgs> | null
    /**
     * Filter, which employees to fetch.
     */
    where?: employeesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employees to fetch.
     */
    orderBy?: employeesOrderByWithRelationInput | employeesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing employees.
     */
    cursor?: employeesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employees.
     */
    skip?: number
    distinct?: EmployeesScalarFieldEnum | EmployeesScalarFieldEnum[]
  }

  /**
   * employees create
   */
  export type employeesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employeesInclude<ExtArgs> | null
    /**
     * The data needed to create a employees.
     */
    data: XOR<employeesCreateInput, employeesUncheckedCreateInput>
  }

  /**
   * employees createMany
   */
  export type employeesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many employees.
     */
    data: employeesCreateManyInput | employeesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * employees update
   */
  export type employeesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employeesInclude<ExtArgs> | null
    /**
     * The data needed to update a employees.
     */
    data: XOR<employeesUpdateInput, employeesUncheckedUpdateInput>
    /**
     * Choose, which employees to update.
     */
    where: employeesWhereUniqueInput
  }

  /**
   * employees updateMany
   */
  export type employeesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update employees.
     */
    data: XOR<employeesUpdateManyMutationInput, employeesUncheckedUpdateManyInput>
    /**
     * Filter which employees to update
     */
    where?: employeesWhereInput
  }

  /**
   * employees upsert
   */
  export type employeesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employeesInclude<ExtArgs> | null
    /**
     * The filter to search for the employees to update in case it exists.
     */
    where: employeesWhereUniqueInput
    /**
     * In case the employees found by the `where` argument doesn't exist, create a new employees with this data.
     */
    create: XOR<employeesCreateInput, employeesUncheckedCreateInput>
    /**
     * In case the employees was found with the provided `where` argument, update it with this data.
     */
    update: XOR<employeesUpdateInput, employeesUncheckedUpdateInput>
  }

  /**
   * employees delete
   */
  export type employeesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employeesInclude<ExtArgs> | null
    /**
     * Filter which employees to delete.
     */
    where: employeesWhereUniqueInput
  }

  /**
   * employees deleteMany
   */
  export type employeesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which employees to delete
     */
    where?: employeesWhereInput
  }

  /**
   * employees.attendance
   */
  export type employees$attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    where?: attendanceWhereInput
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    cursor?: attendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * employees.leaveRequests
   */
  export type employees$leaveRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leaveRequest
     */
    select?: leaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leaveRequestInclude<ExtArgs> | null
    where?: leaveRequestWhereInput
    orderBy?: leaveRequestOrderByWithRelationInput | leaveRequestOrderByWithRelationInput[]
    cursor?: leaveRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * employees.payrolls
   */
  export type employees$payrollsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payroll
     */
    select?: payrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payrollInclude<ExtArgs> | null
    where?: payrollWhereInput
    orderBy?: payrollOrderByWithRelationInput | payrollOrderByWithRelationInput[]
    cursor?: payrollWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }

  /**
   * employees.smsNotifications
   */
  export type employees$smsNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the smsNotification
     */
    select?: smsNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: smsNotificationInclude<ExtArgs> | null
    where?: smsNotificationWhereInput
    orderBy?: smsNotificationOrderByWithRelationInput | smsNotificationOrderByWithRelationInput[]
    cursor?: smsNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SmsNotificationScalarFieldEnum | SmsNotificationScalarFieldEnum[]
  }

  /**
   * employees.phoneNumbers
   */
  export type employees$phoneNumbersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the smsNotification
     */
    select?: smsNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: smsNotificationInclude<ExtArgs> | null
    where?: smsNotificationWhereInput
    orderBy?: smsNotificationOrderByWithRelationInput | smsNotificationOrderByWithRelationInput[]
    cursor?: smsNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SmsNotificationScalarFieldEnum | SmsNotificationScalarFieldEnum[]
  }

  /**
   * employees.users
   */
  export type employees$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    cursor?: userWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * employees without action
   */
  export type employeesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employeesInclude<ExtArgs> | null
  }


  /**
   * Model leaveRequest
   */

  export type AggregateLeaveRequest = {
    _count: LeaveRequestCountAggregateOutputType | null
    _avg: LeaveRequestAvgAggregateOutputType | null
    _sum: LeaveRequestSumAggregateOutputType | null
    _min: LeaveRequestMinAggregateOutputType | null
    _max: LeaveRequestMaxAggregateOutputType | null
  }

  export type LeaveRequestAvgAggregateOutputType = {
    id: number | null
    days_requested: number | null
  }

  export type LeaveRequestSumAggregateOutputType = {
    id: number | null
    days_requested: number | null
  }

  export type LeaveRequestMinAggregateOutputType = {
    id: number | null
    employee_id: string | null
    leave_type: string | null
    reason: string | null
    days_requested: number | null
    department: string | null
    email: string | null
    inclusive_dates: Date | null
    name: string | null
    person_to_takeover: string | null
    position: string | null
    requested_by: string | null
    supporting_document: string | null
    approved_by: string | null
    received_by: string | null
    department_head: string | null
    hr_department: string | null
    date_of_approve: Date | null
    date_of_received: Date | null
    recorded_by: string | null
    withpay: boolean | null
    to_date: Date | null
    created_at: Date | null
    status: $Enums.LeaveRequestStatus | null
  }

  export type LeaveRequestMaxAggregateOutputType = {
    id: number | null
    employee_id: string | null
    leave_type: string | null
    reason: string | null
    days_requested: number | null
    department: string | null
    email: string | null
    inclusive_dates: Date | null
    name: string | null
    person_to_takeover: string | null
    position: string | null
    requested_by: string | null
    supporting_document: string | null
    approved_by: string | null
    received_by: string | null
    department_head: string | null
    hr_department: string | null
    date_of_approve: Date | null
    date_of_received: Date | null
    recorded_by: string | null
    withpay: boolean | null
    to_date: Date | null
    created_at: Date | null
    status: $Enums.LeaveRequestStatus | null
  }

  export type LeaveRequestCountAggregateOutputType = {
    id: number
    employee_id: number
    leave_type: number
    reason: number
    days_requested: number
    department: number
    distribution_copy: number
    email: number
    inclusive_dates: number
    name: number
    person_to_takeover: number
    position: number
    requested_by: number
    supporting_document: number
    approved_by: number
    received_by: number
    department_head: number
    hr_department: number
    date_of_approve: number
    date_of_received: number
    recorded_by: number
    withpay: number
    to_date: number
    created_at: number
    status: number
    _all: number
  }


  export type LeaveRequestAvgAggregateInputType = {
    id?: true
    days_requested?: true
  }

  export type LeaveRequestSumAggregateInputType = {
    id?: true
    days_requested?: true
  }

  export type LeaveRequestMinAggregateInputType = {
    id?: true
    employee_id?: true
    leave_type?: true
    reason?: true
    days_requested?: true
    department?: true
    email?: true
    inclusive_dates?: true
    name?: true
    person_to_takeover?: true
    position?: true
    requested_by?: true
    supporting_document?: true
    approved_by?: true
    received_by?: true
    department_head?: true
    hr_department?: true
    date_of_approve?: true
    date_of_received?: true
    recorded_by?: true
    withpay?: true
    to_date?: true
    created_at?: true
    status?: true
  }

  export type LeaveRequestMaxAggregateInputType = {
    id?: true
    employee_id?: true
    leave_type?: true
    reason?: true
    days_requested?: true
    department?: true
    email?: true
    inclusive_dates?: true
    name?: true
    person_to_takeover?: true
    position?: true
    requested_by?: true
    supporting_document?: true
    approved_by?: true
    received_by?: true
    department_head?: true
    hr_department?: true
    date_of_approve?: true
    date_of_received?: true
    recorded_by?: true
    withpay?: true
    to_date?: true
    created_at?: true
    status?: true
  }

  export type LeaveRequestCountAggregateInputType = {
    id?: true
    employee_id?: true
    leave_type?: true
    reason?: true
    days_requested?: true
    department?: true
    distribution_copy?: true
    email?: true
    inclusive_dates?: true
    name?: true
    person_to_takeover?: true
    position?: true
    requested_by?: true
    supporting_document?: true
    approved_by?: true
    received_by?: true
    department_head?: true
    hr_department?: true
    date_of_approve?: true
    date_of_received?: true
    recorded_by?: true
    withpay?: true
    to_date?: true
    created_at?: true
    status?: true
    _all?: true
  }

  export type LeaveRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which leaveRequest to aggregate.
     */
    where?: leaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leaveRequests to fetch.
     */
    orderBy?: leaveRequestOrderByWithRelationInput | leaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: leaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned leaveRequests
    **/
    _count?: true | LeaveRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaveRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaveRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveRequestMaxAggregateInputType
  }

  export type GetLeaveRequestAggregateType<T extends LeaveRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateLeaveRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeaveRequest[P]>
      : GetScalarType<T[P], AggregateLeaveRequest[P]>
  }




  export type leaveRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: leaveRequestWhereInput
    orderBy?: leaveRequestOrderByWithAggregationInput | leaveRequestOrderByWithAggregationInput[]
    by: LeaveRequestScalarFieldEnum[] | LeaveRequestScalarFieldEnum
    having?: leaveRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveRequestCountAggregateInputType | true
    _avg?: LeaveRequestAvgAggregateInputType
    _sum?: LeaveRequestSumAggregateInputType
    _min?: LeaveRequestMinAggregateInputType
    _max?: LeaveRequestMaxAggregateInputType
  }

  export type LeaveRequestGroupByOutputType = {
    id: number
    employee_id: string | null
    leave_type: string
    reason: string
    days_requested: number
    department: string
    distribution_copy: JsonValue
    email: string
    inclusive_dates: Date
    name: string
    person_to_takeover: string
    position: string
    requested_by: string
    supporting_document: string | null
    approved_by: string | null
    received_by: string | null
    department_head: string | null
    hr_department: string | null
    date_of_approve: Date | null
    date_of_received: Date | null
    recorded_by: string | null
    withpay: boolean | null
    to_date: Date
    created_at: Date
    status: $Enums.LeaveRequestStatus
    _count: LeaveRequestCountAggregateOutputType | null
    _avg: LeaveRequestAvgAggregateOutputType | null
    _sum: LeaveRequestSumAggregateOutputType | null
    _min: LeaveRequestMinAggregateOutputType | null
    _max: LeaveRequestMaxAggregateOutputType | null
  }

  type GetLeaveRequestGroupByPayload<T extends leaveRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveRequestGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveRequestGroupByOutputType[P]>
        }
      >
    >


  export type leaveRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    employee_id?: boolean
    leave_type?: boolean
    reason?: boolean
    days_requested?: boolean
    department?: boolean
    distribution_copy?: boolean
    email?: boolean
    inclusive_dates?: boolean
    name?: boolean
    person_to_takeover?: boolean
    position?: boolean
    requested_by?: boolean
    supporting_document?: boolean
    approved_by?: boolean
    received_by?: boolean
    department_head?: boolean
    hr_department?: boolean
    date_of_approve?: boolean
    date_of_received?: boolean
    recorded_by?: boolean
    withpay?: boolean
    to_date?: boolean
    created_at?: boolean
    status?: boolean
    employee?: boolean | leaveRequest$employeeArgs<ExtArgs>
  }, ExtArgs["result"]["leaveRequest"]>


  export type leaveRequestSelectScalar = {
    id?: boolean
    employee_id?: boolean
    leave_type?: boolean
    reason?: boolean
    days_requested?: boolean
    department?: boolean
    distribution_copy?: boolean
    email?: boolean
    inclusive_dates?: boolean
    name?: boolean
    person_to_takeover?: boolean
    position?: boolean
    requested_by?: boolean
    supporting_document?: boolean
    approved_by?: boolean
    received_by?: boolean
    department_head?: boolean
    hr_department?: boolean
    date_of_approve?: boolean
    date_of_received?: boolean
    recorded_by?: boolean
    withpay?: boolean
    to_date?: boolean
    created_at?: boolean
    status?: boolean
  }

  export type leaveRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | leaveRequest$employeeArgs<ExtArgs>
  }

  export type $leaveRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "leaveRequest"
    objects: {
      employee: Prisma.$employeesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      employee_id: string | null
      leave_type: string
      reason: string
      days_requested: number
      department: string
      distribution_copy: Prisma.JsonValue
      email: string
      inclusive_dates: Date
      name: string
      person_to_takeover: string
      position: string
      requested_by: string
      supporting_document: string | null
      approved_by: string | null
      received_by: string | null
      department_head: string | null
      hr_department: string | null
      date_of_approve: Date | null
      date_of_received: Date | null
      recorded_by: string | null
      withpay: boolean | null
      to_date: Date
      created_at: Date
      status: $Enums.LeaveRequestStatus
    }, ExtArgs["result"]["leaveRequest"]>
    composites: {}
  }

  type leaveRequestGetPayload<S extends boolean | null | undefined | leaveRequestDefaultArgs> = $Result.GetResult<Prisma.$leaveRequestPayload, S>

  type leaveRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<leaveRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeaveRequestCountAggregateInputType | true
    }

  export interface leaveRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['leaveRequest'], meta: { name: 'leaveRequest' } }
    /**
     * Find zero or one LeaveRequest that matches the filter.
     * @param {leaveRequestFindUniqueArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends leaveRequestFindUniqueArgs>(args: SelectSubset<T, leaveRequestFindUniqueArgs<ExtArgs>>): Prisma__leaveRequestClient<$Result.GetResult<Prisma.$leaveRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LeaveRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {leaveRequestFindUniqueOrThrowArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends leaveRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, leaveRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__leaveRequestClient<$Result.GetResult<Prisma.$leaveRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LeaveRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leaveRequestFindFirstArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends leaveRequestFindFirstArgs>(args?: SelectSubset<T, leaveRequestFindFirstArgs<ExtArgs>>): Prisma__leaveRequestClient<$Result.GetResult<Prisma.$leaveRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LeaveRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leaveRequestFindFirstOrThrowArgs} args - Arguments to find a LeaveRequest
     * @example
     * // Get one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends leaveRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, leaveRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__leaveRequestClient<$Result.GetResult<Prisma.$leaveRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LeaveRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leaveRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeaveRequests
     * const leaveRequests = await prisma.leaveRequest.findMany()
     * 
     * // Get first 10 LeaveRequests
     * const leaveRequests = await prisma.leaveRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveRequestWithIdOnly = await prisma.leaveRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends leaveRequestFindManyArgs>(args?: SelectSubset<T, leaveRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$leaveRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LeaveRequest.
     * @param {leaveRequestCreateArgs} args - Arguments to create a LeaveRequest.
     * @example
     * // Create one LeaveRequest
     * const LeaveRequest = await prisma.leaveRequest.create({
     *   data: {
     *     // ... data to create a LeaveRequest
     *   }
     * })
     * 
     */
    create<T extends leaveRequestCreateArgs>(args: SelectSubset<T, leaveRequestCreateArgs<ExtArgs>>): Prisma__leaveRequestClient<$Result.GetResult<Prisma.$leaveRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LeaveRequests.
     * @param {leaveRequestCreateManyArgs} args - Arguments to create many LeaveRequests.
     * @example
     * // Create many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends leaveRequestCreateManyArgs>(args?: SelectSubset<T, leaveRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LeaveRequest.
     * @param {leaveRequestDeleteArgs} args - Arguments to delete one LeaveRequest.
     * @example
     * // Delete one LeaveRequest
     * const LeaveRequest = await prisma.leaveRequest.delete({
     *   where: {
     *     // ... filter to delete one LeaveRequest
     *   }
     * })
     * 
     */
    delete<T extends leaveRequestDeleteArgs>(args: SelectSubset<T, leaveRequestDeleteArgs<ExtArgs>>): Prisma__leaveRequestClient<$Result.GetResult<Prisma.$leaveRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LeaveRequest.
     * @param {leaveRequestUpdateArgs} args - Arguments to update one LeaveRequest.
     * @example
     * // Update one LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends leaveRequestUpdateArgs>(args: SelectSubset<T, leaveRequestUpdateArgs<ExtArgs>>): Prisma__leaveRequestClient<$Result.GetResult<Prisma.$leaveRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LeaveRequests.
     * @param {leaveRequestDeleteManyArgs} args - Arguments to filter LeaveRequests to delete.
     * @example
     * // Delete a few LeaveRequests
     * const { count } = await prisma.leaveRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends leaveRequestDeleteManyArgs>(args?: SelectSubset<T, leaveRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeaveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leaveRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeaveRequests
     * const leaveRequest = await prisma.leaveRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends leaveRequestUpdateManyArgs>(args: SelectSubset<T, leaveRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LeaveRequest.
     * @param {leaveRequestUpsertArgs} args - Arguments to update or create a LeaveRequest.
     * @example
     * // Update or create a LeaveRequest
     * const leaveRequest = await prisma.leaveRequest.upsert({
     *   create: {
     *     // ... data to create a LeaveRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeaveRequest we want to update
     *   }
     * })
     */
    upsert<T extends leaveRequestUpsertArgs>(args: SelectSubset<T, leaveRequestUpsertArgs<ExtArgs>>): Prisma__leaveRequestClient<$Result.GetResult<Prisma.$leaveRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LeaveRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leaveRequestCountArgs} args - Arguments to filter LeaveRequests to count.
     * @example
     * // Count the number of LeaveRequests
     * const count = await prisma.leaveRequest.count({
     *   where: {
     *     // ... the filter for the LeaveRequests we want to count
     *   }
     * })
    **/
    count<T extends leaveRequestCountArgs>(
      args?: Subset<T, leaveRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeaveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveRequestAggregateArgs>(args: Subset<T, LeaveRequestAggregateArgs>): Prisma.PrismaPromise<GetLeaveRequestAggregateType<T>>

    /**
     * Group by LeaveRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {leaveRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends leaveRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: leaveRequestGroupByArgs['orderBy'] }
        : { orderBy?: leaveRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, leaveRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the leaveRequest model
   */
  readonly fields: leaveRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for leaveRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__leaveRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends leaveRequest$employeeArgs<ExtArgs> = {}>(args?: Subset<T, leaveRequest$employeeArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the leaveRequest model
   */ 
  interface leaveRequestFieldRefs {
    readonly id: FieldRef<"leaveRequest", 'Int'>
    readonly employee_id: FieldRef<"leaveRequest", 'String'>
    readonly leave_type: FieldRef<"leaveRequest", 'String'>
    readonly reason: FieldRef<"leaveRequest", 'String'>
    readonly days_requested: FieldRef<"leaveRequest", 'Int'>
    readonly department: FieldRef<"leaveRequest", 'String'>
    readonly distribution_copy: FieldRef<"leaveRequest", 'Json'>
    readonly email: FieldRef<"leaveRequest", 'String'>
    readonly inclusive_dates: FieldRef<"leaveRequest", 'DateTime'>
    readonly name: FieldRef<"leaveRequest", 'String'>
    readonly person_to_takeover: FieldRef<"leaveRequest", 'String'>
    readonly position: FieldRef<"leaveRequest", 'String'>
    readonly requested_by: FieldRef<"leaveRequest", 'String'>
    readonly supporting_document: FieldRef<"leaveRequest", 'String'>
    readonly approved_by: FieldRef<"leaveRequest", 'String'>
    readonly received_by: FieldRef<"leaveRequest", 'String'>
    readonly department_head: FieldRef<"leaveRequest", 'String'>
    readonly hr_department: FieldRef<"leaveRequest", 'String'>
    readonly date_of_approve: FieldRef<"leaveRequest", 'DateTime'>
    readonly date_of_received: FieldRef<"leaveRequest", 'DateTime'>
    readonly recorded_by: FieldRef<"leaveRequest", 'String'>
    readonly withpay: FieldRef<"leaveRequest", 'Boolean'>
    readonly to_date: FieldRef<"leaveRequest", 'DateTime'>
    readonly created_at: FieldRef<"leaveRequest", 'DateTime'>
    readonly status: FieldRef<"leaveRequest", 'LeaveRequestStatus'>
  }
    

  // Custom InputTypes
  /**
   * leaveRequest findUnique
   */
  export type leaveRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leaveRequest
     */
    select?: leaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which leaveRequest to fetch.
     */
    where: leaveRequestWhereUniqueInput
  }

  /**
   * leaveRequest findUniqueOrThrow
   */
  export type leaveRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leaveRequest
     */
    select?: leaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which leaveRequest to fetch.
     */
    where: leaveRequestWhereUniqueInput
  }

  /**
   * leaveRequest findFirst
   */
  export type leaveRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leaveRequest
     */
    select?: leaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which leaveRequest to fetch.
     */
    where?: leaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leaveRequests to fetch.
     */
    orderBy?: leaveRequestOrderByWithRelationInput | leaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for leaveRequests.
     */
    cursor?: leaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of leaveRequests.
     */
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * leaveRequest findFirstOrThrow
   */
  export type leaveRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leaveRequest
     */
    select?: leaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which leaveRequest to fetch.
     */
    where?: leaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leaveRequests to fetch.
     */
    orderBy?: leaveRequestOrderByWithRelationInput | leaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for leaveRequests.
     */
    cursor?: leaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leaveRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of leaveRequests.
     */
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * leaveRequest findMany
   */
  export type leaveRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leaveRequest
     */
    select?: leaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leaveRequestInclude<ExtArgs> | null
    /**
     * Filter, which leaveRequests to fetch.
     */
    where?: leaveRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of leaveRequests to fetch.
     */
    orderBy?: leaveRequestOrderByWithRelationInput | leaveRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing leaveRequests.
     */
    cursor?: leaveRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` leaveRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` leaveRequests.
     */
    skip?: number
    distinct?: LeaveRequestScalarFieldEnum | LeaveRequestScalarFieldEnum[]
  }

  /**
   * leaveRequest create
   */
  export type leaveRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leaveRequest
     */
    select?: leaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leaveRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a leaveRequest.
     */
    data: XOR<leaveRequestCreateInput, leaveRequestUncheckedCreateInput>
  }

  /**
   * leaveRequest createMany
   */
  export type leaveRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many leaveRequests.
     */
    data: leaveRequestCreateManyInput | leaveRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * leaveRequest update
   */
  export type leaveRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leaveRequest
     */
    select?: leaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leaveRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a leaveRequest.
     */
    data: XOR<leaveRequestUpdateInput, leaveRequestUncheckedUpdateInput>
    /**
     * Choose, which leaveRequest to update.
     */
    where: leaveRequestWhereUniqueInput
  }

  /**
   * leaveRequest updateMany
   */
  export type leaveRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update leaveRequests.
     */
    data: XOR<leaveRequestUpdateManyMutationInput, leaveRequestUncheckedUpdateManyInput>
    /**
     * Filter which leaveRequests to update
     */
    where?: leaveRequestWhereInput
  }

  /**
   * leaveRequest upsert
   */
  export type leaveRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leaveRequest
     */
    select?: leaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leaveRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the leaveRequest to update in case it exists.
     */
    where: leaveRequestWhereUniqueInput
    /**
     * In case the leaveRequest found by the `where` argument doesn't exist, create a new leaveRequest with this data.
     */
    create: XOR<leaveRequestCreateInput, leaveRequestUncheckedCreateInput>
    /**
     * In case the leaveRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<leaveRequestUpdateInput, leaveRequestUncheckedUpdateInput>
  }

  /**
   * leaveRequest delete
   */
  export type leaveRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leaveRequest
     */
    select?: leaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leaveRequestInclude<ExtArgs> | null
    /**
     * Filter which leaveRequest to delete.
     */
    where: leaveRequestWhereUniqueInput
  }

  /**
   * leaveRequest deleteMany
   */
  export type leaveRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which leaveRequests to delete
     */
    where?: leaveRequestWhereInput
  }

  /**
   * leaveRequest.employee
   */
  export type leaveRequest$employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employeesInclude<ExtArgs> | null
    where?: employeesWhereInput
  }

  /**
   * leaveRequest without action
   */
  export type leaveRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the leaveRequest
     */
    select?: leaveRequestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: leaveRequestInclude<ExtArgs> | null
  }


  /**
   * Model payroll
   */

  export type AggregatePayroll = {
    _count: PayrollCountAggregateOutputType | null
    _avg: PayrollAvgAggregateOutputType | null
    _sum: PayrollSumAggregateOutputType | null
    _min: PayrollMinAggregateOutputType | null
    _max: PayrollMaxAggregateOutputType | null
  }

  export type PayrollAvgAggregateOutputType = {
    id: number | null
    hours_worked: number | null
    total_pay: number | null
    absent: number | null
  }

  export type PayrollSumAggregateOutputType = {
    id: number | null
    hours_worked: number | null
    total_pay: number | null
    absent: number | null
  }

  export type PayrollMinAggregateOutputType = {
    id: number | null
    payroll_id: string | null
    employee_id: string | null
    hours_worked: number | null
    total_pay: number | null
    created_at: Date | null
    period_start: Date | null
    period_end: Date | null
    absent: number | null
  }

  export type PayrollMaxAggregateOutputType = {
    id: number | null
    payroll_id: string | null
    employee_id: string | null
    hours_worked: number | null
    total_pay: number | null
    created_at: Date | null
    period_start: Date | null
    period_end: Date | null
    absent: number | null
  }

  export type PayrollCountAggregateOutputType = {
    id: number
    payroll_id: number
    employee_id: number
    hours_worked: number
    total_pay: number
    created_at: number
    period_start: number
    period_end: number
    absent: number
    _all: number
  }


  export type PayrollAvgAggregateInputType = {
    id?: true
    hours_worked?: true
    total_pay?: true
    absent?: true
  }

  export type PayrollSumAggregateInputType = {
    id?: true
    hours_worked?: true
    total_pay?: true
    absent?: true
  }

  export type PayrollMinAggregateInputType = {
    id?: true
    payroll_id?: true
    employee_id?: true
    hours_worked?: true
    total_pay?: true
    created_at?: true
    period_start?: true
    period_end?: true
    absent?: true
  }

  export type PayrollMaxAggregateInputType = {
    id?: true
    payroll_id?: true
    employee_id?: true
    hours_worked?: true
    total_pay?: true
    created_at?: true
    period_start?: true
    period_end?: true
    absent?: true
  }

  export type PayrollCountAggregateInputType = {
    id?: true
    payroll_id?: true
    employee_id?: true
    hours_worked?: true
    total_pay?: true
    created_at?: true
    period_start?: true
    period_end?: true
    absent?: true
    _all?: true
  }

  export type PayrollAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payroll to aggregate.
     */
    where?: payrollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payrolls to fetch.
     */
    orderBy?: payrollOrderByWithRelationInput | payrollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: payrollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payrolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payrolls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payrolls
    **/
    _count?: true | PayrollCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PayrollAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PayrollSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayrollMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayrollMaxAggregateInputType
  }

  export type GetPayrollAggregateType<T extends PayrollAggregateArgs> = {
        [P in keyof T & keyof AggregatePayroll]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayroll[P]>
      : GetScalarType<T[P], AggregatePayroll[P]>
  }




  export type payrollGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payrollWhereInput
    orderBy?: payrollOrderByWithAggregationInput | payrollOrderByWithAggregationInput[]
    by: PayrollScalarFieldEnum[] | PayrollScalarFieldEnum
    having?: payrollScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayrollCountAggregateInputType | true
    _avg?: PayrollAvgAggregateInputType
    _sum?: PayrollSumAggregateInputType
    _min?: PayrollMinAggregateInputType
    _max?: PayrollMaxAggregateInputType
  }

  export type PayrollGroupByOutputType = {
    id: number
    payroll_id: string | null
    employee_id: string
    hours_worked: number
    total_pay: number
    created_at: Date
    period_start: Date | null
    period_end: Date | null
    absent: number
    _count: PayrollCountAggregateOutputType | null
    _avg: PayrollAvgAggregateOutputType | null
    _sum: PayrollSumAggregateOutputType | null
    _min: PayrollMinAggregateOutputType | null
    _max: PayrollMaxAggregateOutputType | null
  }

  type GetPayrollGroupByPayload<T extends payrollGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayrollGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayrollGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayrollGroupByOutputType[P]>
            : GetScalarType<T[P], PayrollGroupByOutputType[P]>
        }
      >
    >


  export type payrollSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payroll_id?: boolean
    employee_id?: boolean
    hours_worked?: boolean
    total_pay?: boolean
    created_at?: boolean
    period_start?: boolean
    period_end?: boolean
    absent?: boolean
    employee?: boolean | employeesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payroll"]>


  export type payrollSelectScalar = {
    id?: boolean
    payroll_id?: boolean
    employee_id?: boolean
    hours_worked?: boolean
    total_pay?: boolean
    created_at?: boolean
    period_start?: boolean
    period_end?: boolean
    absent?: boolean
  }

  export type payrollInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | employeesDefaultArgs<ExtArgs>
  }

  export type $payrollPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payroll"
    objects: {
      employee: Prisma.$employeesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      payroll_id: string | null
      employee_id: string
      hours_worked: number
      total_pay: number
      created_at: Date
      period_start: Date | null
      period_end: Date | null
      absent: number
    }, ExtArgs["result"]["payroll"]>
    composites: {}
  }

  type payrollGetPayload<S extends boolean | null | undefined | payrollDefaultArgs> = $Result.GetResult<Prisma.$payrollPayload, S>

  type payrollCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<payrollFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PayrollCountAggregateInputType | true
    }

  export interface payrollDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payroll'], meta: { name: 'payroll' } }
    /**
     * Find zero or one Payroll that matches the filter.
     * @param {payrollFindUniqueArgs} args - Arguments to find a Payroll
     * @example
     * // Get one Payroll
     * const payroll = await prisma.payroll.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends payrollFindUniqueArgs>(args: SelectSubset<T, payrollFindUniqueArgs<ExtArgs>>): Prisma__payrollClient<$Result.GetResult<Prisma.$payrollPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Payroll that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {payrollFindUniqueOrThrowArgs} args - Arguments to find a Payroll
     * @example
     * // Get one Payroll
     * const payroll = await prisma.payroll.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends payrollFindUniqueOrThrowArgs>(args: SelectSubset<T, payrollFindUniqueOrThrowArgs<ExtArgs>>): Prisma__payrollClient<$Result.GetResult<Prisma.$payrollPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Payroll that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payrollFindFirstArgs} args - Arguments to find a Payroll
     * @example
     * // Get one Payroll
     * const payroll = await prisma.payroll.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends payrollFindFirstArgs>(args?: SelectSubset<T, payrollFindFirstArgs<ExtArgs>>): Prisma__payrollClient<$Result.GetResult<Prisma.$payrollPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Payroll that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payrollFindFirstOrThrowArgs} args - Arguments to find a Payroll
     * @example
     * // Get one Payroll
     * const payroll = await prisma.payroll.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends payrollFindFirstOrThrowArgs>(args?: SelectSubset<T, payrollFindFirstOrThrowArgs<ExtArgs>>): Prisma__payrollClient<$Result.GetResult<Prisma.$payrollPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Payrolls that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payrollFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payrolls
     * const payrolls = await prisma.payroll.findMany()
     * 
     * // Get first 10 Payrolls
     * const payrolls = await prisma.payroll.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payrollWithIdOnly = await prisma.payroll.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends payrollFindManyArgs>(args?: SelectSubset<T, payrollFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payrollPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Payroll.
     * @param {payrollCreateArgs} args - Arguments to create a Payroll.
     * @example
     * // Create one Payroll
     * const Payroll = await prisma.payroll.create({
     *   data: {
     *     // ... data to create a Payroll
     *   }
     * })
     * 
     */
    create<T extends payrollCreateArgs>(args: SelectSubset<T, payrollCreateArgs<ExtArgs>>): Prisma__payrollClient<$Result.GetResult<Prisma.$payrollPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Payrolls.
     * @param {payrollCreateManyArgs} args - Arguments to create many Payrolls.
     * @example
     * // Create many Payrolls
     * const payroll = await prisma.payroll.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends payrollCreateManyArgs>(args?: SelectSubset<T, payrollCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payroll.
     * @param {payrollDeleteArgs} args - Arguments to delete one Payroll.
     * @example
     * // Delete one Payroll
     * const Payroll = await prisma.payroll.delete({
     *   where: {
     *     // ... filter to delete one Payroll
     *   }
     * })
     * 
     */
    delete<T extends payrollDeleteArgs>(args: SelectSubset<T, payrollDeleteArgs<ExtArgs>>): Prisma__payrollClient<$Result.GetResult<Prisma.$payrollPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Payroll.
     * @param {payrollUpdateArgs} args - Arguments to update one Payroll.
     * @example
     * // Update one Payroll
     * const payroll = await prisma.payroll.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends payrollUpdateArgs>(args: SelectSubset<T, payrollUpdateArgs<ExtArgs>>): Prisma__payrollClient<$Result.GetResult<Prisma.$payrollPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Payrolls.
     * @param {payrollDeleteManyArgs} args - Arguments to filter Payrolls to delete.
     * @example
     * // Delete a few Payrolls
     * const { count } = await prisma.payroll.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends payrollDeleteManyArgs>(args?: SelectSubset<T, payrollDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payrolls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payrollUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payrolls
     * const payroll = await prisma.payroll.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends payrollUpdateManyArgs>(args: SelectSubset<T, payrollUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payroll.
     * @param {payrollUpsertArgs} args - Arguments to update or create a Payroll.
     * @example
     * // Update or create a Payroll
     * const payroll = await prisma.payroll.upsert({
     *   create: {
     *     // ... data to create a Payroll
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payroll we want to update
     *   }
     * })
     */
    upsert<T extends payrollUpsertArgs>(args: SelectSubset<T, payrollUpsertArgs<ExtArgs>>): Prisma__payrollClient<$Result.GetResult<Prisma.$payrollPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Payrolls.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payrollCountArgs} args - Arguments to filter Payrolls to count.
     * @example
     * // Count the number of Payrolls
     * const count = await prisma.payroll.count({
     *   where: {
     *     // ... the filter for the Payrolls we want to count
     *   }
     * })
    **/
    count<T extends payrollCountArgs>(
      args?: Subset<T, payrollCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayrollCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payroll.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayrollAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayrollAggregateArgs>(args: Subset<T, PayrollAggregateArgs>): Prisma.PrismaPromise<GetPayrollAggregateType<T>>

    /**
     * Group by Payroll.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payrollGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends payrollGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: payrollGroupByArgs['orderBy'] }
        : { orderBy?: payrollGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, payrollGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayrollGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payroll model
   */
  readonly fields: payrollFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payroll.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__payrollClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends employeesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, employeesDefaultArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the payroll model
   */ 
  interface payrollFieldRefs {
    readonly id: FieldRef<"payroll", 'Int'>
    readonly payroll_id: FieldRef<"payroll", 'String'>
    readonly employee_id: FieldRef<"payroll", 'String'>
    readonly hours_worked: FieldRef<"payroll", 'Float'>
    readonly total_pay: FieldRef<"payroll", 'Float'>
    readonly created_at: FieldRef<"payroll", 'DateTime'>
    readonly period_start: FieldRef<"payroll", 'DateTime'>
    readonly period_end: FieldRef<"payroll", 'DateTime'>
    readonly absent: FieldRef<"payroll", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * payroll findUnique
   */
  export type payrollFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payroll
     */
    select?: payrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payrollInclude<ExtArgs> | null
    /**
     * Filter, which payroll to fetch.
     */
    where: payrollWhereUniqueInput
  }

  /**
   * payroll findUniqueOrThrow
   */
  export type payrollFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payroll
     */
    select?: payrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payrollInclude<ExtArgs> | null
    /**
     * Filter, which payroll to fetch.
     */
    where: payrollWhereUniqueInput
  }

  /**
   * payroll findFirst
   */
  export type payrollFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payroll
     */
    select?: payrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payrollInclude<ExtArgs> | null
    /**
     * Filter, which payroll to fetch.
     */
    where?: payrollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payrolls to fetch.
     */
    orderBy?: payrollOrderByWithRelationInput | payrollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payrolls.
     */
    cursor?: payrollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payrolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payrolls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payrolls.
     */
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }

  /**
   * payroll findFirstOrThrow
   */
  export type payrollFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payroll
     */
    select?: payrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payrollInclude<ExtArgs> | null
    /**
     * Filter, which payroll to fetch.
     */
    where?: payrollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payrolls to fetch.
     */
    orderBy?: payrollOrderByWithRelationInput | payrollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payrolls.
     */
    cursor?: payrollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payrolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payrolls.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payrolls.
     */
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }

  /**
   * payroll findMany
   */
  export type payrollFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payroll
     */
    select?: payrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payrollInclude<ExtArgs> | null
    /**
     * Filter, which payrolls to fetch.
     */
    where?: payrollWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payrolls to fetch.
     */
    orderBy?: payrollOrderByWithRelationInput | payrollOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payrolls.
     */
    cursor?: payrollWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payrolls from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payrolls.
     */
    skip?: number
    distinct?: PayrollScalarFieldEnum | PayrollScalarFieldEnum[]
  }

  /**
   * payroll create
   */
  export type payrollCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payroll
     */
    select?: payrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payrollInclude<ExtArgs> | null
    /**
     * The data needed to create a payroll.
     */
    data: XOR<payrollCreateInput, payrollUncheckedCreateInput>
  }

  /**
   * payroll createMany
   */
  export type payrollCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payrolls.
     */
    data: payrollCreateManyInput | payrollCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payroll update
   */
  export type payrollUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payroll
     */
    select?: payrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payrollInclude<ExtArgs> | null
    /**
     * The data needed to update a payroll.
     */
    data: XOR<payrollUpdateInput, payrollUncheckedUpdateInput>
    /**
     * Choose, which payroll to update.
     */
    where: payrollWhereUniqueInput
  }

  /**
   * payroll updateMany
   */
  export type payrollUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payrolls.
     */
    data: XOR<payrollUpdateManyMutationInput, payrollUncheckedUpdateManyInput>
    /**
     * Filter which payrolls to update
     */
    where?: payrollWhereInput
  }

  /**
   * payroll upsert
   */
  export type payrollUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payroll
     */
    select?: payrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payrollInclude<ExtArgs> | null
    /**
     * The filter to search for the payroll to update in case it exists.
     */
    where: payrollWhereUniqueInput
    /**
     * In case the payroll found by the `where` argument doesn't exist, create a new payroll with this data.
     */
    create: XOR<payrollCreateInput, payrollUncheckedCreateInput>
    /**
     * In case the payroll was found with the provided `where` argument, update it with this data.
     */
    update: XOR<payrollUpdateInput, payrollUncheckedUpdateInput>
  }

  /**
   * payroll delete
   */
  export type payrollDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payroll
     */
    select?: payrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payrollInclude<ExtArgs> | null
    /**
     * Filter which payroll to delete.
     */
    where: payrollWhereUniqueInput
  }

  /**
   * payroll deleteMany
   */
  export type payrollDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payrolls to delete
     */
    where?: payrollWhereInput
  }

  /**
   * payroll without action
   */
  export type payrollDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payroll
     */
    select?: payrollSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payrollInclude<ExtArgs> | null
  }


  /**
   * Model smsNotification
   */

  export type AggregateSmsNotification = {
    _count: SmsNotificationCountAggregateOutputType | null
    _avg: SmsNotificationAvgAggregateOutputType | null
    _sum: SmsNotificationSumAggregateOutputType | null
    _min: SmsNotificationMinAggregateOutputType | null
    _max: SmsNotificationMaxAggregateOutputType | null
  }

  export type SmsNotificationAvgAggregateOutputType = {
    id: number | null
  }

  export type SmsNotificationSumAggregateOutputType = {
    id: number | null
  }

  export type SmsNotificationMinAggregateOutputType = {
    id: number | null
    notification_id: string | null
    employee_id: string | null
    phone_number: string | null
    message: string | null
    sent_date: Date | null
  }

  export type SmsNotificationMaxAggregateOutputType = {
    id: number | null
    notification_id: string | null
    employee_id: string | null
    phone_number: string | null
    message: string | null
    sent_date: Date | null
  }

  export type SmsNotificationCountAggregateOutputType = {
    id: number
    notification_id: number
    employee_id: number
    phone_number: number
    message: number
    sent_date: number
    _all: number
  }


  export type SmsNotificationAvgAggregateInputType = {
    id?: true
  }

  export type SmsNotificationSumAggregateInputType = {
    id?: true
  }

  export type SmsNotificationMinAggregateInputType = {
    id?: true
    notification_id?: true
    employee_id?: true
    phone_number?: true
    message?: true
    sent_date?: true
  }

  export type SmsNotificationMaxAggregateInputType = {
    id?: true
    notification_id?: true
    employee_id?: true
    phone_number?: true
    message?: true
    sent_date?: true
  }

  export type SmsNotificationCountAggregateInputType = {
    id?: true
    notification_id?: true
    employee_id?: true
    phone_number?: true
    message?: true
    sent_date?: true
    _all?: true
  }

  export type SmsNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which smsNotification to aggregate.
     */
    where?: smsNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of smsNotifications to fetch.
     */
    orderBy?: smsNotificationOrderByWithRelationInput | smsNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: smsNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` smsNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` smsNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned smsNotifications
    **/
    _count?: true | SmsNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SmsNotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SmsNotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SmsNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SmsNotificationMaxAggregateInputType
  }

  export type GetSmsNotificationAggregateType<T extends SmsNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateSmsNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSmsNotification[P]>
      : GetScalarType<T[P], AggregateSmsNotification[P]>
  }




  export type smsNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: smsNotificationWhereInput
    orderBy?: smsNotificationOrderByWithAggregationInput | smsNotificationOrderByWithAggregationInput[]
    by: SmsNotificationScalarFieldEnum[] | SmsNotificationScalarFieldEnum
    having?: smsNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SmsNotificationCountAggregateInputType | true
    _avg?: SmsNotificationAvgAggregateInputType
    _sum?: SmsNotificationSumAggregateInputType
    _min?: SmsNotificationMinAggregateInputType
    _max?: SmsNotificationMaxAggregateInputType
  }

  export type SmsNotificationGroupByOutputType = {
    id: number
    notification_id: string
    employee_id: string
    phone_number: string
    message: string
    sent_date: Date
    _count: SmsNotificationCountAggregateOutputType | null
    _avg: SmsNotificationAvgAggregateOutputType | null
    _sum: SmsNotificationSumAggregateOutputType | null
    _min: SmsNotificationMinAggregateOutputType | null
    _max: SmsNotificationMaxAggregateOutputType | null
  }

  type GetSmsNotificationGroupByPayload<T extends smsNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SmsNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SmsNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SmsNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], SmsNotificationGroupByOutputType[P]>
        }
      >
    >


  export type smsNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notification_id?: boolean
    employee_id?: boolean
    phone_number?: boolean
    message?: boolean
    sent_date?: boolean
    employee?: boolean | employeesDefaultArgs<ExtArgs>
    phoneNumber?: boolean | employeesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["smsNotification"]>


  export type smsNotificationSelectScalar = {
    id?: boolean
    notification_id?: boolean
    employee_id?: boolean
    phone_number?: boolean
    message?: boolean
    sent_date?: boolean
  }

  export type smsNotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | employeesDefaultArgs<ExtArgs>
    phoneNumber?: boolean | employeesDefaultArgs<ExtArgs>
  }

  export type $smsNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "smsNotification"
    objects: {
      employee: Prisma.$employeesPayload<ExtArgs>
      phoneNumber: Prisma.$employeesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      notification_id: string
      employee_id: string
      phone_number: string
      message: string
      sent_date: Date
    }, ExtArgs["result"]["smsNotification"]>
    composites: {}
  }

  type smsNotificationGetPayload<S extends boolean | null | undefined | smsNotificationDefaultArgs> = $Result.GetResult<Prisma.$smsNotificationPayload, S>

  type smsNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<smsNotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SmsNotificationCountAggregateInputType | true
    }

  export interface smsNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['smsNotification'], meta: { name: 'smsNotification' } }
    /**
     * Find zero or one SmsNotification that matches the filter.
     * @param {smsNotificationFindUniqueArgs} args - Arguments to find a SmsNotification
     * @example
     * // Get one SmsNotification
     * const smsNotification = await prisma.smsNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends smsNotificationFindUniqueArgs>(args: SelectSubset<T, smsNotificationFindUniqueArgs<ExtArgs>>): Prisma__smsNotificationClient<$Result.GetResult<Prisma.$smsNotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SmsNotification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {smsNotificationFindUniqueOrThrowArgs} args - Arguments to find a SmsNotification
     * @example
     * // Get one SmsNotification
     * const smsNotification = await prisma.smsNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends smsNotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, smsNotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__smsNotificationClient<$Result.GetResult<Prisma.$smsNotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SmsNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {smsNotificationFindFirstArgs} args - Arguments to find a SmsNotification
     * @example
     * // Get one SmsNotification
     * const smsNotification = await prisma.smsNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends smsNotificationFindFirstArgs>(args?: SelectSubset<T, smsNotificationFindFirstArgs<ExtArgs>>): Prisma__smsNotificationClient<$Result.GetResult<Prisma.$smsNotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SmsNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {smsNotificationFindFirstOrThrowArgs} args - Arguments to find a SmsNotification
     * @example
     * // Get one SmsNotification
     * const smsNotification = await prisma.smsNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends smsNotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, smsNotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__smsNotificationClient<$Result.GetResult<Prisma.$smsNotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SmsNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {smsNotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SmsNotifications
     * const smsNotifications = await prisma.smsNotification.findMany()
     * 
     * // Get first 10 SmsNotifications
     * const smsNotifications = await prisma.smsNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const smsNotificationWithIdOnly = await prisma.smsNotification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends smsNotificationFindManyArgs>(args?: SelectSubset<T, smsNotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$smsNotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SmsNotification.
     * @param {smsNotificationCreateArgs} args - Arguments to create a SmsNotification.
     * @example
     * // Create one SmsNotification
     * const SmsNotification = await prisma.smsNotification.create({
     *   data: {
     *     // ... data to create a SmsNotification
     *   }
     * })
     * 
     */
    create<T extends smsNotificationCreateArgs>(args: SelectSubset<T, smsNotificationCreateArgs<ExtArgs>>): Prisma__smsNotificationClient<$Result.GetResult<Prisma.$smsNotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SmsNotifications.
     * @param {smsNotificationCreateManyArgs} args - Arguments to create many SmsNotifications.
     * @example
     * // Create many SmsNotifications
     * const smsNotification = await prisma.smsNotification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends smsNotificationCreateManyArgs>(args?: SelectSubset<T, smsNotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SmsNotification.
     * @param {smsNotificationDeleteArgs} args - Arguments to delete one SmsNotification.
     * @example
     * // Delete one SmsNotification
     * const SmsNotification = await prisma.smsNotification.delete({
     *   where: {
     *     // ... filter to delete one SmsNotification
     *   }
     * })
     * 
     */
    delete<T extends smsNotificationDeleteArgs>(args: SelectSubset<T, smsNotificationDeleteArgs<ExtArgs>>): Prisma__smsNotificationClient<$Result.GetResult<Prisma.$smsNotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SmsNotification.
     * @param {smsNotificationUpdateArgs} args - Arguments to update one SmsNotification.
     * @example
     * // Update one SmsNotification
     * const smsNotification = await prisma.smsNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends smsNotificationUpdateArgs>(args: SelectSubset<T, smsNotificationUpdateArgs<ExtArgs>>): Prisma__smsNotificationClient<$Result.GetResult<Prisma.$smsNotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SmsNotifications.
     * @param {smsNotificationDeleteManyArgs} args - Arguments to filter SmsNotifications to delete.
     * @example
     * // Delete a few SmsNotifications
     * const { count } = await prisma.smsNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends smsNotificationDeleteManyArgs>(args?: SelectSubset<T, smsNotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SmsNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {smsNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SmsNotifications
     * const smsNotification = await prisma.smsNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends smsNotificationUpdateManyArgs>(args: SelectSubset<T, smsNotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SmsNotification.
     * @param {smsNotificationUpsertArgs} args - Arguments to update or create a SmsNotification.
     * @example
     * // Update or create a SmsNotification
     * const smsNotification = await prisma.smsNotification.upsert({
     *   create: {
     *     // ... data to create a SmsNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SmsNotification we want to update
     *   }
     * })
     */
    upsert<T extends smsNotificationUpsertArgs>(args: SelectSubset<T, smsNotificationUpsertArgs<ExtArgs>>): Prisma__smsNotificationClient<$Result.GetResult<Prisma.$smsNotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SmsNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {smsNotificationCountArgs} args - Arguments to filter SmsNotifications to count.
     * @example
     * // Count the number of SmsNotifications
     * const count = await prisma.smsNotification.count({
     *   where: {
     *     // ... the filter for the SmsNotifications we want to count
     *   }
     * })
    **/
    count<T extends smsNotificationCountArgs>(
      args?: Subset<T, smsNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SmsNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SmsNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SmsNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SmsNotificationAggregateArgs>(args: Subset<T, SmsNotificationAggregateArgs>): Prisma.PrismaPromise<GetSmsNotificationAggregateType<T>>

    /**
     * Group by SmsNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {smsNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends smsNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: smsNotificationGroupByArgs['orderBy'] }
        : { orderBy?: smsNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, smsNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSmsNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the smsNotification model
   */
  readonly fields: smsNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for smsNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__smsNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends employeesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, employeesDefaultArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    phoneNumber<T extends employeesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, employeesDefaultArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the smsNotification model
   */ 
  interface smsNotificationFieldRefs {
    readonly id: FieldRef<"smsNotification", 'Int'>
    readonly notification_id: FieldRef<"smsNotification", 'String'>
    readonly employee_id: FieldRef<"smsNotification", 'String'>
    readonly phone_number: FieldRef<"smsNotification", 'String'>
    readonly message: FieldRef<"smsNotification", 'String'>
    readonly sent_date: FieldRef<"smsNotification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * smsNotification findUnique
   */
  export type smsNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the smsNotification
     */
    select?: smsNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: smsNotificationInclude<ExtArgs> | null
    /**
     * Filter, which smsNotification to fetch.
     */
    where: smsNotificationWhereUniqueInput
  }

  /**
   * smsNotification findUniqueOrThrow
   */
  export type smsNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the smsNotification
     */
    select?: smsNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: smsNotificationInclude<ExtArgs> | null
    /**
     * Filter, which smsNotification to fetch.
     */
    where: smsNotificationWhereUniqueInput
  }

  /**
   * smsNotification findFirst
   */
  export type smsNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the smsNotification
     */
    select?: smsNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: smsNotificationInclude<ExtArgs> | null
    /**
     * Filter, which smsNotification to fetch.
     */
    where?: smsNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of smsNotifications to fetch.
     */
    orderBy?: smsNotificationOrderByWithRelationInput | smsNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for smsNotifications.
     */
    cursor?: smsNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` smsNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` smsNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of smsNotifications.
     */
    distinct?: SmsNotificationScalarFieldEnum | SmsNotificationScalarFieldEnum[]
  }

  /**
   * smsNotification findFirstOrThrow
   */
  export type smsNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the smsNotification
     */
    select?: smsNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: smsNotificationInclude<ExtArgs> | null
    /**
     * Filter, which smsNotification to fetch.
     */
    where?: smsNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of smsNotifications to fetch.
     */
    orderBy?: smsNotificationOrderByWithRelationInput | smsNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for smsNotifications.
     */
    cursor?: smsNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` smsNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` smsNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of smsNotifications.
     */
    distinct?: SmsNotificationScalarFieldEnum | SmsNotificationScalarFieldEnum[]
  }

  /**
   * smsNotification findMany
   */
  export type smsNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the smsNotification
     */
    select?: smsNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: smsNotificationInclude<ExtArgs> | null
    /**
     * Filter, which smsNotifications to fetch.
     */
    where?: smsNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of smsNotifications to fetch.
     */
    orderBy?: smsNotificationOrderByWithRelationInput | smsNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing smsNotifications.
     */
    cursor?: smsNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` smsNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` smsNotifications.
     */
    skip?: number
    distinct?: SmsNotificationScalarFieldEnum | SmsNotificationScalarFieldEnum[]
  }

  /**
   * smsNotification create
   */
  export type smsNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the smsNotification
     */
    select?: smsNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: smsNotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a smsNotification.
     */
    data: XOR<smsNotificationCreateInput, smsNotificationUncheckedCreateInput>
  }

  /**
   * smsNotification createMany
   */
  export type smsNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many smsNotifications.
     */
    data: smsNotificationCreateManyInput | smsNotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * smsNotification update
   */
  export type smsNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the smsNotification
     */
    select?: smsNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: smsNotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a smsNotification.
     */
    data: XOR<smsNotificationUpdateInput, smsNotificationUncheckedUpdateInput>
    /**
     * Choose, which smsNotification to update.
     */
    where: smsNotificationWhereUniqueInput
  }

  /**
   * smsNotification updateMany
   */
  export type smsNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update smsNotifications.
     */
    data: XOR<smsNotificationUpdateManyMutationInput, smsNotificationUncheckedUpdateManyInput>
    /**
     * Filter which smsNotifications to update
     */
    where?: smsNotificationWhereInput
  }

  /**
   * smsNotification upsert
   */
  export type smsNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the smsNotification
     */
    select?: smsNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: smsNotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the smsNotification to update in case it exists.
     */
    where: smsNotificationWhereUniqueInput
    /**
     * In case the smsNotification found by the `where` argument doesn't exist, create a new smsNotification with this data.
     */
    create: XOR<smsNotificationCreateInput, smsNotificationUncheckedCreateInput>
    /**
     * In case the smsNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<smsNotificationUpdateInput, smsNotificationUncheckedUpdateInput>
  }

  /**
   * smsNotification delete
   */
  export type smsNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the smsNotification
     */
    select?: smsNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: smsNotificationInclude<ExtArgs> | null
    /**
     * Filter which smsNotification to delete.
     */
    where: smsNotificationWhereUniqueInput
  }

  /**
   * smsNotification deleteMany
   */
  export type smsNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which smsNotifications to delete
     */
    where?: smsNotificationWhereInput
  }

  /**
   * smsNotification without action
   */
  export type smsNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the smsNotification
     */
    select?: smsNotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: smsNotificationInclude<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    email: string | null
    password: string | null
    employee_id: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    email: string | null
    password: string | null
    employee_id: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    user_id: number
    email: number
    password: number
    employee_id: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    user_id?: true
    email?: true
    password?: true
    employee_id?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    user_id?: true
    email?: true
    password?: true
    employee_id?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    user_id?: true
    email?: true
    password?: true
    employee_id?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    user_id: string
    email: string
    password: string
    employee_id: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    email?: boolean
    password?: boolean
    employee_id?: boolean
    employee?: boolean | user$employeeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type userSelectScalar = {
    id?: boolean
    user_id?: boolean
    email?: boolean
    password?: boolean
    employee_id?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employee?: boolean | user$employeeArgs<ExtArgs>
  }

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      employee: Prisma.$employeesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      email: string
      password: string
      employee_id: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employee<T extends user$employeeArgs<ExtArgs> = {}>(args?: Subset<T, user$employeeArgs<ExtArgs>>): Prisma__employeesClient<$Result.GetResult<Prisma.$employeesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly user_id: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly employee_id: FieldRef<"user", 'String'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.employee
   */
  export type user$employeeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employees
     */
    select?: employeesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: employeesInclude<ExtArgs> | null
    where?: employeesWhereInput
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model employeeRequest
   */

  export type AggregateEmployeeRequest = {
    _count: EmployeeRequestCountAggregateOutputType | null
    _avg: EmployeeRequestAvgAggregateOutputType | null
    _sum: EmployeeRequestSumAggregateOutputType | null
    _min: EmployeeRequestMinAggregateOutputType | null
    _max: EmployeeRequestMaxAggregateOutputType | null
  }

  export type EmployeeRequestAvgAggregateOutputType = {
    id: number | null
  }

  export type EmployeeRequestSumAggregateOutputType = {
    id: number | null
  }

  export type EmployeeRequestMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    phone_number: string | null
    status: $Enums.RequestStatus | null
  }

  export type EmployeeRequestMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    phone_number: string | null
    status: $Enums.RequestStatus | null
  }

  export type EmployeeRequestCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    phone_number: number
    status: number
    _all: number
  }


  export type EmployeeRequestAvgAggregateInputType = {
    id?: true
  }

  export type EmployeeRequestSumAggregateInputType = {
    id?: true
  }

  export type EmployeeRequestMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone_number?: true
    status?: true
  }

  export type EmployeeRequestMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone_number?: true
    status?: true
  }

  export type EmployeeRequestCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    phone_number?: true
    status?: true
    _all?: true
  }

  export type EmployeeRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which employeeRequest to aggregate.
     */
    where?: employeeRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employeeRequests to fetch.
     */
    orderBy?: employeeRequestOrderByWithRelationInput | employeeRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: employeeRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employeeRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employeeRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned employeeRequests
    **/
    _count?: true | EmployeeRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployeeRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployeeRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployeeRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployeeRequestMaxAggregateInputType
  }

  export type GetEmployeeRequestAggregateType<T extends EmployeeRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployeeRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployeeRequest[P]>
      : GetScalarType<T[P], AggregateEmployeeRequest[P]>
  }




  export type employeeRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: employeeRequestWhereInput
    orderBy?: employeeRequestOrderByWithAggregationInput | employeeRequestOrderByWithAggregationInput[]
    by: EmployeeRequestScalarFieldEnum[] | EmployeeRequestScalarFieldEnum
    having?: employeeRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployeeRequestCountAggregateInputType | true
    _avg?: EmployeeRequestAvgAggregateInputType
    _sum?: EmployeeRequestSumAggregateInputType
    _min?: EmployeeRequestMinAggregateInputType
    _max?: EmployeeRequestMaxAggregateInputType
  }

  export type EmployeeRequestGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    phone_number: string
    status: $Enums.RequestStatus
    _count: EmployeeRequestCountAggregateOutputType | null
    _avg: EmployeeRequestAvgAggregateOutputType | null
    _sum: EmployeeRequestSumAggregateOutputType | null
    _min: EmployeeRequestMinAggregateOutputType | null
    _max: EmployeeRequestMaxAggregateOutputType | null
  }

  type GetEmployeeRequestGroupByPayload<T extends employeeRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployeeRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployeeRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployeeRequestGroupByOutputType[P]>
            : GetScalarType<T[P], EmployeeRequestGroupByOutputType[P]>
        }
      >
    >


  export type employeeRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone_number?: boolean
    status?: boolean
  }, ExtArgs["result"]["employeeRequest"]>


  export type employeeRequestSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    phone_number?: boolean
    status?: boolean
  }


  export type $employeeRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "employeeRequest"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      phone_number: string
      status: $Enums.RequestStatus
    }, ExtArgs["result"]["employeeRequest"]>
    composites: {}
  }

  type employeeRequestGetPayload<S extends boolean | null | undefined | employeeRequestDefaultArgs> = $Result.GetResult<Prisma.$employeeRequestPayload, S>

  type employeeRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<employeeRequestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmployeeRequestCountAggregateInputType | true
    }

  export interface employeeRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['employeeRequest'], meta: { name: 'employeeRequest' } }
    /**
     * Find zero or one EmployeeRequest that matches the filter.
     * @param {employeeRequestFindUniqueArgs} args - Arguments to find a EmployeeRequest
     * @example
     * // Get one EmployeeRequest
     * const employeeRequest = await prisma.employeeRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends employeeRequestFindUniqueArgs>(args: SelectSubset<T, employeeRequestFindUniqueArgs<ExtArgs>>): Prisma__employeeRequestClient<$Result.GetResult<Prisma.$employeeRequestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmployeeRequest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {employeeRequestFindUniqueOrThrowArgs} args - Arguments to find a EmployeeRequest
     * @example
     * // Get one EmployeeRequest
     * const employeeRequest = await prisma.employeeRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends employeeRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, employeeRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__employeeRequestClient<$Result.GetResult<Prisma.$employeeRequestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmployeeRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeeRequestFindFirstArgs} args - Arguments to find a EmployeeRequest
     * @example
     * // Get one EmployeeRequest
     * const employeeRequest = await prisma.employeeRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends employeeRequestFindFirstArgs>(args?: SelectSubset<T, employeeRequestFindFirstArgs<ExtArgs>>): Prisma__employeeRequestClient<$Result.GetResult<Prisma.$employeeRequestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmployeeRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeeRequestFindFirstOrThrowArgs} args - Arguments to find a EmployeeRequest
     * @example
     * // Get one EmployeeRequest
     * const employeeRequest = await prisma.employeeRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends employeeRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, employeeRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__employeeRequestClient<$Result.GetResult<Prisma.$employeeRequestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmployeeRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeeRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmployeeRequests
     * const employeeRequests = await prisma.employeeRequest.findMany()
     * 
     * // Get first 10 EmployeeRequests
     * const employeeRequests = await prisma.employeeRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employeeRequestWithIdOnly = await prisma.employeeRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends employeeRequestFindManyArgs>(args?: SelectSubset<T, employeeRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$employeeRequestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmployeeRequest.
     * @param {employeeRequestCreateArgs} args - Arguments to create a EmployeeRequest.
     * @example
     * // Create one EmployeeRequest
     * const EmployeeRequest = await prisma.employeeRequest.create({
     *   data: {
     *     // ... data to create a EmployeeRequest
     *   }
     * })
     * 
     */
    create<T extends employeeRequestCreateArgs>(args: SelectSubset<T, employeeRequestCreateArgs<ExtArgs>>): Prisma__employeeRequestClient<$Result.GetResult<Prisma.$employeeRequestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmployeeRequests.
     * @param {employeeRequestCreateManyArgs} args - Arguments to create many EmployeeRequests.
     * @example
     * // Create many EmployeeRequests
     * const employeeRequest = await prisma.employeeRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends employeeRequestCreateManyArgs>(args?: SelectSubset<T, employeeRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmployeeRequest.
     * @param {employeeRequestDeleteArgs} args - Arguments to delete one EmployeeRequest.
     * @example
     * // Delete one EmployeeRequest
     * const EmployeeRequest = await prisma.employeeRequest.delete({
     *   where: {
     *     // ... filter to delete one EmployeeRequest
     *   }
     * })
     * 
     */
    delete<T extends employeeRequestDeleteArgs>(args: SelectSubset<T, employeeRequestDeleteArgs<ExtArgs>>): Prisma__employeeRequestClient<$Result.GetResult<Prisma.$employeeRequestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmployeeRequest.
     * @param {employeeRequestUpdateArgs} args - Arguments to update one EmployeeRequest.
     * @example
     * // Update one EmployeeRequest
     * const employeeRequest = await prisma.employeeRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends employeeRequestUpdateArgs>(args: SelectSubset<T, employeeRequestUpdateArgs<ExtArgs>>): Prisma__employeeRequestClient<$Result.GetResult<Prisma.$employeeRequestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmployeeRequests.
     * @param {employeeRequestDeleteManyArgs} args - Arguments to filter EmployeeRequests to delete.
     * @example
     * // Delete a few EmployeeRequests
     * const { count } = await prisma.employeeRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends employeeRequestDeleteManyArgs>(args?: SelectSubset<T, employeeRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmployeeRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeeRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmployeeRequests
     * const employeeRequest = await prisma.employeeRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends employeeRequestUpdateManyArgs>(args: SelectSubset<T, employeeRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmployeeRequest.
     * @param {employeeRequestUpsertArgs} args - Arguments to update or create a EmployeeRequest.
     * @example
     * // Update or create a EmployeeRequest
     * const employeeRequest = await prisma.employeeRequest.upsert({
     *   create: {
     *     // ... data to create a EmployeeRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmployeeRequest we want to update
     *   }
     * })
     */
    upsert<T extends employeeRequestUpsertArgs>(args: SelectSubset<T, employeeRequestUpsertArgs<ExtArgs>>): Prisma__employeeRequestClient<$Result.GetResult<Prisma.$employeeRequestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmployeeRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeeRequestCountArgs} args - Arguments to filter EmployeeRequests to count.
     * @example
     * // Count the number of EmployeeRequests
     * const count = await prisma.employeeRequest.count({
     *   where: {
     *     // ... the filter for the EmployeeRequests we want to count
     *   }
     * })
    **/
    count<T extends employeeRequestCountArgs>(
      args?: Subset<T, employeeRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployeeRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmployeeRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployeeRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployeeRequestAggregateArgs>(args: Subset<T, EmployeeRequestAggregateArgs>): Prisma.PrismaPromise<GetEmployeeRequestAggregateType<T>>

    /**
     * Group by EmployeeRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {employeeRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends employeeRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: employeeRequestGroupByArgs['orderBy'] }
        : { orderBy?: employeeRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, employeeRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployeeRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the employeeRequest model
   */
  readonly fields: employeeRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for employeeRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__employeeRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the employeeRequest model
   */ 
  interface employeeRequestFieldRefs {
    readonly id: FieldRef<"employeeRequest", 'Int'>
    readonly name: FieldRef<"employeeRequest", 'String'>
    readonly email: FieldRef<"employeeRequest", 'String'>
    readonly password: FieldRef<"employeeRequest", 'String'>
    readonly phone_number: FieldRef<"employeeRequest", 'String'>
    readonly status: FieldRef<"employeeRequest", 'RequestStatus'>
  }
    

  // Custom InputTypes
  /**
   * employeeRequest findUnique
   */
  export type employeeRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employeeRequest
     */
    select?: employeeRequestSelect<ExtArgs> | null
    /**
     * Filter, which employeeRequest to fetch.
     */
    where: employeeRequestWhereUniqueInput
  }

  /**
   * employeeRequest findUniqueOrThrow
   */
  export type employeeRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employeeRequest
     */
    select?: employeeRequestSelect<ExtArgs> | null
    /**
     * Filter, which employeeRequest to fetch.
     */
    where: employeeRequestWhereUniqueInput
  }

  /**
   * employeeRequest findFirst
   */
  export type employeeRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employeeRequest
     */
    select?: employeeRequestSelect<ExtArgs> | null
    /**
     * Filter, which employeeRequest to fetch.
     */
    where?: employeeRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employeeRequests to fetch.
     */
    orderBy?: employeeRequestOrderByWithRelationInput | employeeRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for employeeRequests.
     */
    cursor?: employeeRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employeeRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employeeRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of employeeRequests.
     */
    distinct?: EmployeeRequestScalarFieldEnum | EmployeeRequestScalarFieldEnum[]
  }

  /**
   * employeeRequest findFirstOrThrow
   */
  export type employeeRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employeeRequest
     */
    select?: employeeRequestSelect<ExtArgs> | null
    /**
     * Filter, which employeeRequest to fetch.
     */
    where?: employeeRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employeeRequests to fetch.
     */
    orderBy?: employeeRequestOrderByWithRelationInput | employeeRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for employeeRequests.
     */
    cursor?: employeeRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employeeRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employeeRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of employeeRequests.
     */
    distinct?: EmployeeRequestScalarFieldEnum | EmployeeRequestScalarFieldEnum[]
  }

  /**
   * employeeRequest findMany
   */
  export type employeeRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employeeRequest
     */
    select?: employeeRequestSelect<ExtArgs> | null
    /**
     * Filter, which employeeRequests to fetch.
     */
    where?: employeeRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of employeeRequests to fetch.
     */
    orderBy?: employeeRequestOrderByWithRelationInput | employeeRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing employeeRequests.
     */
    cursor?: employeeRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` employeeRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` employeeRequests.
     */
    skip?: number
    distinct?: EmployeeRequestScalarFieldEnum | EmployeeRequestScalarFieldEnum[]
  }

  /**
   * employeeRequest create
   */
  export type employeeRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employeeRequest
     */
    select?: employeeRequestSelect<ExtArgs> | null
    /**
     * The data needed to create a employeeRequest.
     */
    data: XOR<employeeRequestCreateInput, employeeRequestUncheckedCreateInput>
  }

  /**
   * employeeRequest createMany
   */
  export type employeeRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many employeeRequests.
     */
    data: employeeRequestCreateManyInput | employeeRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * employeeRequest update
   */
  export type employeeRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employeeRequest
     */
    select?: employeeRequestSelect<ExtArgs> | null
    /**
     * The data needed to update a employeeRequest.
     */
    data: XOR<employeeRequestUpdateInput, employeeRequestUncheckedUpdateInput>
    /**
     * Choose, which employeeRequest to update.
     */
    where: employeeRequestWhereUniqueInput
  }

  /**
   * employeeRequest updateMany
   */
  export type employeeRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update employeeRequests.
     */
    data: XOR<employeeRequestUpdateManyMutationInput, employeeRequestUncheckedUpdateManyInput>
    /**
     * Filter which employeeRequests to update
     */
    where?: employeeRequestWhereInput
  }

  /**
   * employeeRequest upsert
   */
  export type employeeRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employeeRequest
     */
    select?: employeeRequestSelect<ExtArgs> | null
    /**
     * The filter to search for the employeeRequest to update in case it exists.
     */
    where: employeeRequestWhereUniqueInput
    /**
     * In case the employeeRequest found by the `where` argument doesn't exist, create a new employeeRequest with this data.
     */
    create: XOR<employeeRequestCreateInput, employeeRequestUncheckedCreateInput>
    /**
     * In case the employeeRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<employeeRequestUpdateInput, employeeRequestUncheckedUpdateInput>
  }

  /**
   * employeeRequest delete
   */
  export type employeeRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employeeRequest
     */
    select?: employeeRequestSelect<ExtArgs> | null
    /**
     * Filter which employeeRequest to delete.
     */
    where: employeeRequestWhereUniqueInput
  }

  /**
   * employeeRequest deleteMany
   */
  export type employeeRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which employeeRequests to delete
     */
    where?: employeeRequestWhereInput
  }

  /**
   * employeeRequest without action
   */
  export type employeeRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the employeeRequest
     */
    select?: employeeRequestSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    position: 'position'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const AttendanceScalarFieldEnum: {
    id: 'id',
    date: 'date',
    time_in: 'time_in',
    time_out: 'time_out',
    attendance_id: 'attendance_id',
    employee_id: 'employee_id',
    hours: 'hours'
  };

  export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


  export const EmployeesScalarFieldEnum: {
    id: 'id',
    employee_id: 'employee_id',
    name: 'name',
    created_at: 'created_at',
    department: 'department',
    position: 'position',
    qrcode: 'qrcode',
    avatar: 'avatar',
    email: 'email',
    phone_number: 'phone_number',
    basicSalary: 'basicSalary',
    totalSalary: 'totalSalary',
    monthSalary: 'monthSalary',
    password: 'password',
    hierarchy: 'hierarchy',
    day_off: 'day_off',
    leaveCredits: 'leaveCredits'
  };

  export type EmployeesScalarFieldEnum = (typeof EmployeesScalarFieldEnum)[keyof typeof EmployeesScalarFieldEnum]


  export const LeaveRequestScalarFieldEnum: {
    id: 'id',
    employee_id: 'employee_id',
    leave_type: 'leave_type',
    reason: 'reason',
    days_requested: 'days_requested',
    department: 'department',
    distribution_copy: 'distribution_copy',
    email: 'email',
    inclusive_dates: 'inclusive_dates',
    name: 'name',
    person_to_takeover: 'person_to_takeover',
    position: 'position',
    requested_by: 'requested_by',
    supporting_document: 'supporting_document',
    approved_by: 'approved_by',
    received_by: 'received_by',
    department_head: 'department_head',
    hr_department: 'hr_department',
    date_of_approve: 'date_of_approve',
    date_of_received: 'date_of_received',
    recorded_by: 'recorded_by',
    withpay: 'withpay',
    to_date: 'to_date',
    created_at: 'created_at',
    status: 'status'
  };

  export type LeaveRequestScalarFieldEnum = (typeof LeaveRequestScalarFieldEnum)[keyof typeof LeaveRequestScalarFieldEnum]


  export const PayrollScalarFieldEnum: {
    id: 'id',
    payroll_id: 'payroll_id',
    employee_id: 'employee_id',
    hours_worked: 'hours_worked',
    total_pay: 'total_pay',
    created_at: 'created_at',
    period_start: 'period_start',
    period_end: 'period_end',
    absent: 'absent'
  };

  export type PayrollScalarFieldEnum = (typeof PayrollScalarFieldEnum)[keyof typeof PayrollScalarFieldEnum]


  export const SmsNotificationScalarFieldEnum: {
    id: 'id',
    notification_id: 'notification_id',
    employee_id: 'employee_id',
    phone_number: 'phone_number',
    message: 'message',
    sent_date: 'sent_date'
  };

  export type SmsNotificationScalarFieldEnum = (typeof SmsNotificationScalarFieldEnum)[keyof typeof SmsNotificationScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    email: 'email',
    password: 'password',
    employee_id: 'employee_id'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EmployeeRequestScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    phone_number: 'phone_number',
    status: 'status'
  };

  export type EmployeeRequestScalarFieldEnum = (typeof EmployeeRequestScalarFieldEnum)[keyof typeof EmployeeRequestScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const adminOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    password: 'password',
    position: 'position'
  };

  export type adminOrderByRelevanceFieldEnum = (typeof adminOrderByRelevanceFieldEnum)[keyof typeof adminOrderByRelevanceFieldEnum]


  export const attendanceOrderByRelevanceFieldEnum: {
    date: 'date',
    time_in: 'time_in',
    time_out: 'time_out',
    attendance_id: 'attendance_id',
    employee_id: 'employee_id'
  };

  export type attendanceOrderByRelevanceFieldEnum = (typeof attendanceOrderByRelevanceFieldEnum)[keyof typeof attendanceOrderByRelevanceFieldEnum]


  export const employeesOrderByRelevanceFieldEnum: {
    employee_id: 'employee_id',
    name: 'name',
    department: 'department',
    position: 'position',
    qrcode: 'qrcode',
    avatar: 'avatar',
    email: 'email',
    phone_number: 'phone_number',
    password: 'password',
    hierarchy: 'hierarchy'
  };

  export type employeesOrderByRelevanceFieldEnum = (typeof employeesOrderByRelevanceFieldEnum)[keyof typeof employeesOrderByRelevanceFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const leaveRequestOrderByRelevanceFieldEnum: {
    employee_id: 'employee_id',
    leave_type: 'leave_type',
    reason: 'reason',
    department: 'department',
    email: 'email',
    name: 'name',
    person_to_takeover: 'person_to_takeover',
    position: 'position',
    requested_by: 'requested_by',
    supporting_document: 'supporting_document',
    approved_by: 'approved_by',
    received_by: 'received_by',
    department_head: 'department_head',
    hr_department: 'hr_department',
    recorded_by: 'recorded_by'
  };

  export type leaveRequestOrderByRelevanceFieldEnum = (typeof leaveRequestOrderByRelevanceFieldEnum)[keyof typeof leaveRequestOrderByRelevanceFieldEnum]


  export const payrollOrderByRelevanceFieldEnum: {
    payroll_id: 'payroll_id',
    employee_id: 'employee_id'
  };

  export type payrollOrderByRelevanceFieldEnum = (typeof payrollOrderByRelevanceFieldEnum)[keyof typeof payrollOrderByRelevanceFieldEnum]


  export const smsNotificationOrderByRelevanceFieldEnum: {
    notification_id: 'notification_id',
    employee_id: 'employee_id',
    phone_number: 'phone_number',
    message: 'message'
  };

  export type smsNotificationOrderByRelevanceFieldEnum = (typeof smsNotificationOrderByRelevanceFieldEnum)[keyof typeof smsNotificationOrderByRelevanceFieldEnum]


  export const userOrderByRelevanceFieldEnum: {
    user_id: 'user_id',
    email: 'email',
    password: 'password',
    employee_id: 'employee_id'
  };

  export type userOrderByRelevanceFieldEnum = (typeof userOrderByRelevanceFieldEnum)[keyof typeof userOrderByRelevanceFieldEnum]


  export const employeeRequestOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    password: 'password',
    phone_number: 'phone_number'
  };

  export type employeeRequestOrderByRelevanceFieldEnum = (typeof employeeRequestOrderByRelevanceFieldEnum)[keyof typeof employeeRequestOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'LeaveRequestStatus'
   */
  export type EnumLeaveRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeaveRequestStatus'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'RequestStatus'
   */
  export type EnumRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RequestStatus'>
    
  /**
   * Deep Input Types
   */


  export type adminWhereInput = {
    AND?: adminWhereInput | adminWhereInput[]
    OR?: adminWhereInput[]
    NOT?: adminWhereInput | adminWhereInput[]
    id?: IntFilter<"admin"> | number
    name?: StringFilter<"admin"> | string
    email?: StringFilter<"admin"> | string
    password?: StringFilter<"admin"> | string
    position?: StringNullableFilter<"admin"> | string | null
  }

  export type adminOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    position?: SortOrderInput | SortOrder
    _relevance?: adminOrderByRelevanceInput
  }

  export type adminWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: adminWhereInput | adminWhereInput[]
    OR?: adminWhereInput[]
    NOT?: adminWhereInput | adminWhereInput[]
    name?: StringFilter<"admin"> | string
    password?: StringFilter<"admin"> | string
    position?: StringNullableFilter<"admin"> | string | null
  }, "id" | "email">

  export type adminOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    position?: SortOrderInput | SortOrder
    _count?: adminCountOrderByAggregateInput
    _avg?: adminAvgOrderByAggregateInput
    _max?: adminMaxOrderByAggregateInput
    _min?: adminMinOrderByAggregateInput
    _sum?: adminSumOrderByAggregateInput
  }

  export type adminScalarWhereWithAggregatesInput = {
    AND?: adminScalarWhereWithAggregatesInput | adminScalarWhereWithAggregatesInput[]
    OR?: adminScalarWhereWithAggregatesInput[]
    NOT?: adminScalarWhereWithAggregatesInput | adminScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"admin"> | number
    name?: StringWithAggregatesFilter<"admin"> | string
    email?: StringWithAggregatesFilter<"admin"> | string
    password?: StringWithAggregatesFilter<"admin"> | string
    position?: StringNullableWithAggregatesFilter<"admin"> | string | null
  }

  export type attendanceWhereInput = {
    AND?: attendanceWhereInput | attendanceWhereInput[]
    OR?: attendanceWhereInput[]
    NOT?: attendanceWhereInput | attendanceWhereInput[]
    id?: IntFilter<"attendance"> | number
    date?: StringFilter<"attendance"> | string
    time_in?: StringFilter<"attendance"> | string
    time_out?: StringNullableFilter<"attendance"> | string | null
    attendance_id?: StringFilter<"attendance"> | string
    employee_id?: StringFilter<"attendance"> | string
    hours?: IntNullableFilter<"attendance"> | number | null
    employee?: XOR<EmployeesScalarRelationFilter, employeesWhereInput>
  }

  export type attendanceOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    time_in?: SortOrder
    time_out?: SortOrderInput | SortOrder
    attendance_id?: SortOrder
    employee_id?: SortOrder
    hours?: SortOrderInput | SortOrder
    employee?: employeesOrderByWithRelationInput
    _relevance?: attendanceOrderByRelevanceInput
  }

  export type attendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: attendanceWhereInput | attendanceWhereInput[]
    OR?: attendanceWhereInput[]
    NOT?: attendanceWhereInput | attendanceWhereInput[]
    date?: StringFilter<"attendance"> | string
    time_in?: StringFilter<"attendance"> | string
    time_out?: StringNullableFilter<"attendance"> | string | null
    attendance_id?: StringFilter<"attendance"> | string
    employee_id?: StringFilter<"attendance"> | string
    hours?: IntNullableFilter<"attendance"> | number | null
    employee?: XOR<EmployeesScalarRelationFilter, employeesWhereInput>
  }, "id">

  export type attendanceOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    time_in?: SortOrder
    time_out?: SortOrderInput | SortOrder
    attendance_id?: SortOrder
    employee_id?: SortOrder
    hours?: SortOrderInput | SortOrder
    _count?: attendanceCountOrderByAggregateInput
    _avg?: attendanceAvgOrderByAggregateInput
    _max?: attendanceMaxOrderByAggregateInput
    _min?: attendanceMinOrderByAggregateInput
    _sum?: attendanceSumOrderByAggregateInput
  }

  export type attendanceScalarWhereWithAggregatesInput = {
    AND?: attendanceScalarWhereWithAggregatesInput | attendanceScalarWhereWithAggregatesInput[]
    OR?: attendanceScalarWhereWithAggregatesInput[]
    NOT?: attendanceScalarWhereWithAggregatesInput | attendanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"attendance"> | number
    date?: StringWithAggregatesFilter<"attendance"> | string
    time_in?: StringWithAggregatesFilter<"attendance"> | string
    time_out?: StringNullableWithAggregatesFilter<"attendance"> | string | null
    attendance_id?: StringWithAggregatesFilter<"attendance"> | string
    employee_id?: StringWithAggregatesFilter<"attendance"> | string
    hours?: IntNullableWithAggregatesFilter<"attendance"> | number | null
  }

  export type employeesWhereInput = {
    AND?: employeesWhereInput | employeesWhereInput[]
    OR?: employeesWhereInput[]
    NOT?: employeesWhereInput | employeesWhereInput[]
    id?: IntFilter<"employees"> | number
    employee_id?: StringFilter<"employees"> | string
    name?: StringFilter<"employees"> | string
    created_at?: DateTimeFilter<"employees"> | Date | string
    department?: StringFilter<"employees"> | string
    position?: StringFilter<"employees"> | string
    qrcode?: StringFilter<"employees"> | string
    avatar?: StringNullableFilter<"employees"> | string | null
    email?: StringFilter<"employees"> | string
    phone_number?: StringFilter<"employees"> | string
    basicSalary?: IntFilter<"employees"> | number
    totalSalary?: IntFilter<"employees"> | number
    monthSalary?: IntFilter<"employees"> | number
    password?: StringFilter<"employees"> | string
    hierarchy?: StringFilter<"employees"> | string
    day_off?: BoolNullableFilter<"employees"> | boolean | null
    leaveCredits?: IntFilter<"employees"> | number
    attendance?: AttendanceListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    payrolls?: PayrollListRelationFilter
    smsNotifications?: SmsNotificationListRelationFilter
    phoneNumbers?: SmsNotificationListRelationFilter
    users?: UserListRelationFilter
  }

  export type employeesOrderByWithRelationInput = {
    id?: SortOrder
    employee_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    department?: SortOrder
    position?: SortOrder
    qrcode?: SortOrder
    avatar?: SortOrderInput | SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    basicSalary?: SortOrder
    totalSalary?: SortOrder
    monthSalary?: SortOrder
    password?: SortOrder
    hierarchy?: SortOrder
    day_off?: SortOrderInput | SortOrder
    leaveCredits?: SortOrder
    attendance?: attendanceOrderByRelationAggregateInput
    leaveRequests?: leaveRequestOrderByRelationAggregateInput
    payrolls?: payrollOrderByRelationAggregateInput
    smsNotifications?: smsNotificationOrderByRelationAggregateInput
    phoneNumbers?: smsNotificationOrderByRelationAggregateInput
    users?: userOrderByRelationAggregateInput
    _relevance?: employeesOrderByRelevanceInput
  }

  export type employeesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    employee_id?: string
    email?: string
    phone_number?: string
    AND?: employeesWhereInput | employeesWhereInput[]
    OR?: employeesWhereInput[]
    NOT?: employeesWhereInput | employeesWhereInput[]
    name?: StringFilter<"employees"> | string
    created_at?: DateTimeFilter<"employees"> | Date | string
    department?: StringFilter<"employees"> | string
    position?: StringFilter<"employees"> | string
    qrcode?: StringFilter<"employees"> | string
    avatar?: StringNullableFilter<"employees"> | string | null
    basicSalary?: IntFilter<"employees"> | number
    totalSalary?: IntFilter<"employees"> | number
    monthSalary?: IntFilter<"employees"> | number
    password?: StringFilter<"employees"> | string
    hierarchy?: StringFilter<"employees"> | string
    day_off?: BoolNullableFilter<"employees"> | boolean | null
    leaveCredits?: IntFilter<"employees"> | number
    attendance?: AttendanceListRelationFilter
    leaveRequests?: LeaveRequestListRelationFilter
    payrolls?: PayrollListRelationFilter
    smsNotifications?: SmsNotificationListRelationFilter
    phoneNumbers?: SmsNotificationListRelationFilter
    users?: UserListRelationFilter
  }, "id" | "employee_id" | "email" | "phone_number">

  export type employeesOrderByWithAggregationInput = {
    id?: SortOrder
    employee_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    department?: SortOrder
    position?: SortOrder
    qrcode?: SortOrder
    avatar?: SortOrderInput | SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    basicSalary?: SortOrder
    totalSalary?: SortOrder
    monthSalary?: SortOrder
    password?: SortOrder
    hierarchy?: SortOrder
    day_off?: SortOrderInput | SortOrder
    leaveCredits?: SortOrder
    _count?: employeesCountOrderByAggregateInput
    _avg?: employeesAvgOrderByAggregateInput
    _max?: employeesMaxOrderByAggregateInput
    _min?: employeesMinOrderByAggregateInput
    _sum?: employeesSumOrderByAggregateInput
  }

  export type employeesScalarWhereWithAggregatesInput = {
    AND?: employeesScalarWhereWithAggregatesInput | employeesScalarWhereWithAggregatesInput[]
    OR?: employeesScalarWhereWithAggregatesInput[]
    NOT?: employeesScalarWhereWithAggregatesInput | employeesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"employees"> | number
    employee_id?: StringWithAggregatesFilter<"employees"> | string
    name?: StringWithAggregatesFilter<"employees"> | string
    created_at?: DateTimeWithAggregatesFilter<"employees"> | Date | string
    department?: StringWithAggregatesFilter<"employees"> | string
    position?: StringWithAggregatesFilter<"employees"> | string
    qrcode?: StringWithAggregatesFilter<"employees"> | string
    avatar?: StringNullableWithAggregatesFilter<"employees"> | string | null
    email?: StringWithAggregatesFilter<"employees"> | string
    phone_number?: StringWithAggregatesFilter<"employees"> | string
    basicSalary?: IntWithAggregatesFilter<"employees"> | number
    totalSalary?: IntWithAggregatesFilter<"employees"> | number
    monthSalary?: IntWithAggregatesFilter<"employees"> | number
    password?: StringWithAggregatesFilter<"employees"> | string
    hierarchy?: StringWithAggregatesFilter<"employees"> | string
    day_off?: BoolNullableWithAggregatesFilter<"employees"> | boolean | null
    leaveCredits?: IntWithAggregatesFilter<"employees"> | number
  }

  export type leaveRequestWhereInput = {
    AND?: leaveRequestWhereInput | leaveRequestWhereInput[]
    OR?: leaveRequestWhereInput[]
    NOT?: leaveRequestWhereInput | leaveRequestWhereInput[]
    id?: IntFilter<"leaveRequest"> | number
    employee_id?: StringNullableFilter<"leaveRequest"> | string | null
    leave_type?: StringFilter<"leaveRequest"> | string
    reason?: StringFilter<"leaveRequest"> | string
    days_requested?: IntFilter<"leaveRequest"> | number
    department?: StringFilter<"leaveRequest"> | string
    distribution_copy?: JsonFilter<"leaveRequest">
    email?: StringFilter<"leaveRequest"> | string
    inclusive_dates?: DateTimeFilter<"leaveRequest"> | Date | string
    name?: StringFilter<"leaveRequest"> | string
    person_to_takeover?: StringFilter<"leaveRequest"> | string
    position?: StringFilter<"leaveRequest"> | string
    requested_by?: StringFilter<"leaveRequest"> | string
    supporting_document?: StringNullableFilter<"leaveRequest"> | string | null
    approved_by?: StringNullableFilter<"leaveRequest"> | string | null
    received_by?: StringNullableFilter<"leaveRequest"> | string | null
    department_head?: StringNullableFilter<"leaveRequest"> | string | null
    hr_department?: StringNullableFilter<"leaveRequest"> | string | null
    date_of_approve?: DateTimeNullableFilter<"leaveRequest"> | Date | string | null
    date_of_received?: DateTimeNullableFilter<"leaveRequest"> | Date | string | null
    recorded_by?: StringNullableFilter<"leaveRequest"> | string | null
    withpay?: BoolNullableFilter<"leaveRequest"> | boolean | null
    to_date?: DateTimeFilter<"leaveRequest"> | Date | string
    created_at?: DateTimeFilter<"leaveRequest"> | Date | string
    status?: EnumLeaveRequestStatusFilter<"leaveRequest"> | $Enums.LeaveRequestStatus
    employee?: XOR<EmployeesNullableScalarRelationFilter, employeesWhereInput> | null
  }

  export type leaveRequestOrderByWithRelationInput = {
    id?: SortOrder
    employee_id?: SortOrderInput | SortOrder
    leave_type?: SortOrder
    reason?: SortOrder
    days_requested?: SortOrder
    department?: SortOrder
    distribution_copy?: SortOrder
    email?: SortOrder
    inclusive_dates?: SortOrder
    name?: SortOrder
    person_to_takeover?: SortOrder
    position?: SortOrder
    requested_by?: SortOrder
    supporting_document?: SortOrderInput | SortOrder
    approved_by?: SortOrderInput | SortOrder
    received_by?: SortOrderInput | SortOrder
    department_head?: SortOrderInput | SortOrder
    hr_department?: SortOrderInput | SortOrder
    date_of_approve?: SortOrderInput | SortOrder
    date_of_received?: SortOrderInput | SortOrder
    recorded_by?: SortOrderInput | SortOrder
    withpay?: SortOrderInput | SortOrder
    to_date?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
    employee?: employeesOrderByWithRelationInput
    _relevance?: leaveRequestOrderByRelevanceInput
  }

  export type leaveRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: leaveRequestWhereInput | leaveRequestWhereInput[]
    OR?: leaveRequestWhereInput[]
    NOT?: leaveRequestWhereInput | leaveRequestWhereInput[]
    employee_id?: StringNullableFilter<"leaveRequest"> | string | null
    leave_type?: StringFilter<"leaveRequest"> | string
    reason?: StringFilter<"leaveRequest"> | string
    days_requested?: IntFilter<"leaveRequest"> | number
    department?: StringFilter<"leaveRequest"> | string
    distribution_copy?: JsonFilter<"leaveRequest">
    email?: StringFilter<"leaveRequest"> | string
    inclusive_dates?: DateTimeFilter<"leaveRequest"> | Date | string
    name?: StringFilter<"leaveRequest"> | string
    person_to_takeover?: StringFilter<"leaveRequest"> | string
    position?: StringFilter<"leaveRequest"> | string
    requested_by?: StringFilter<"leaveRequest"> | string
    supporting_document?: StringNullableFilter<"leaveRequest"> | string | null
    approved_by?: StringNullableFilter<"leaveRequest"> | string | null
    received_by?: StringNullableFilter<"leaveRequest"> | string | null
    department_head?: StringNullableFilter<"leaveRequest"> | string | null
    hr_department?: StringNullableFilter<"leaveRequest"> | string | null
    date_of_approve?: DateTimeNullableFilter<"leaveRequest"> | Date | string | null
    date_of_received?: DateTimeNullableFilter<"leaveRequest"> | Date | string | null
    recorded_by?: StringNullableFilter<"leaveRequest"> | string | null
    withpay?: BoolNullableFilter<"leaveRequest"> | boolean | null
    to_date?: DateTimeFilter<"leaveRequest"> | Date | string
    created_at?: DateTimeFilter<"leaveRequest"> | Date | string
    status?: EnumLeaveRequestStatusFilter<"leaveRequest"> | $Enums.LeaveRequestStatus
    employee?: XOR<EmployeesNullableScalarRelationFilter, employeesWhereInput> | null
  }, "id">

  export type leaveRequestOrderByWithAggregationInput = {
    id?: SortOrder
    employee_id?: SortOrderInput | SortOrder
    leave_type?: SortOrder
    reason?: SortOrder
    days_requested?: SortOrder
    department?: SortOrder
    distribution_copy?: SortOrder
    email?: SortOrder
    inclusive_dates?: SortOrder
    name?: SortOrder
    person_to_takeover?: SortOrder
    position?: SortOrder
    requested_by?: SortOrder
    supporting_document?: SortOrderInput | SortOrder
    approved_by?: SortOrderInput | SortOrder
    received_by?: SortOrderInput | SortOrder
    department_head?: SortOrderInput | SortOrder
    hr_department?: SortOrderInput | SortOrder
    date_of_approve?: SortOrderInput | SortOrder
    date_of_received?: SortOrderInput | SortOrder
    recorded_by?: SortOrderInput | SortOrder
    withpay?: SortOrderInput | SortOrder
    to_date?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
    _count?: leaveRequestCountOrderByAggregateInput
    _avg?: leaveRequestAvgOrderByAggregateInput
    _max?: leaveRequestMaxOrderByAggregateInput
    _min?: leaveRequestMinOrderByAggregateInput
    _sum?: leaveRequestSumOrderByAggregateInput
  }

  export type leaveRequestScalarWhereWithAggregatesInput = {
    AND?: leaveRequestScalarWhereWithAggregatesInput | leaveRequestScalarWhereWithAggregatesInput[]
    OR?: leaveRequestScalarWhereWithAggregatesInput[]
    NOT?: leaveRequestScalarWhereWithAggregatesInput | leaveRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"leaveRequest"> | number
    employee_id?: StringNullableWithAggregatesFilter<"leaveRequest"> | string | null
    leave_type?: StringWithAggregatesFilter<"leaveRequest"> | string
    reason?: StringWithAggregatesFilter<"leaveRequest"> | string
    days_requested?: IntWithAggregatesFilter<"leaveRequest"> | number
    department?: StringWithAggregatesFilter<"leaveRequest"> | string
    distribution_copy?: JsonWithAggregatesFilter<"leaveRequest">
    email?: StringWithAggregatesFilter<"leaveRequest"> | string
    inclusive_dates?: DateTimeWithAggregatesFilter<"leaveRequest"> | Date | string
    name?: StringWithAggregatesFilter<"leaveRequest"> | string
    person_to_takeover?: StringWithAggregatesFilter<"leaveRequest"> | string
    position?: StringWithAggregatesFilter<"leaveRequest"> | string
    requested_by?: StringWithAggregatesFilter<"leaveRequest"> | string
    supporting_document?: StringNullableWithAggregatesFilter<"leaveRequest"> | string | null
    approved_by?: StringNullableWithAggregatesFilter<"leaveRequest"> | string | null
    received_by?: StringNullableWithAggregatesFilter<"leaveRequest"> | string | null
    department_head?: StringNullableWithAggregatesFilter<"leaveRequest"> | string | null
    hr_department?: StringNullableWithAggregatesFilter<"leaveRequest"> | string | null
    date_of_approve?: DateTimeNullableWithAggregatesFilter<"leaveRequest"> | Date | string | null
    date_of_received?: DateTimeNullableWithAggregatesFilter<"leaveRequest"> | Date | string | null
    recorded_by?: StringNullableWithAggregatesFilter<"leaveRequest"> | string | null
    withpay?: BoolNullableWithAggregatesFilter<"leaveRequest"> | boolean | null
    to_date?: DateTimeWithAggregatesFilter<"leaveRequest"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"leaveRequest"> | Date | string
    status?: EnumLeaveRequestStatusWithAggregatesFilter<"leaveRequest"> | $Enums.LeaveRequestStatus
  }

  export type payrollWhereInput = {
    AND?: payrollWhereInput | payrollWhereInput[]
    OR?: payrollWhereInput[]
    NOT?: payrollWhereInput | payrollWhereInput[]
    id?: IntFilter<"payroll"> | number
    payroll_id?: StringNullableFilter<"payroll"> | string | null
    employee_id?: StringFilter<"payroll"> | string
    hours_worked?: FloatFilter<"payroll"> | number
    total_pay?: FloatFilter<"payroll"> | number
    created_at?: DateTimeFilter<"payroll"> | Date | string
    period_start?: DateTimeNullableFilter<"payroll"> | Date | string | null
    period_end?: DateTimeNullableFilter<"payroll"> | Date | string | null
    absent?: IntFilter<"payroll"> | number
    employee?: XOR<EmployeesScalarRelationFilter, employeesWhereInput>
  }

  export type payrollOrderByWithRelationInput = {
    id?: SortOrder
    payroll_id?: SortOrderInput | SortOrder
    employee_id?: SortOrder
    hours_worked?: SortOrder
    total_pay?: SortOrder
    created_at?: SortOrder
    period_start?: SortOrderInput | SortOrder
    period_end?: SortOrderInput | SortOrder
    absent?: SortOrder
    employee?: employeesOrderByWithRelationInput
    _relevance?: payrollOrderByRelevanceInput
  }

  export type payrollWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: payrollWhereInput | payrollWhereInput[]
    OR?: payrollWhereInput[]
    NOT?: payrollWhereInput | payrollWhereInput[]
    payroll_id?: StringNullableFilter<"payroll"> | string | null
    employee_id?: StringFilter<"payroll"> | string
    hours_worked?: FloatFilter<"payroll"> | number
    total_pay?: FloatFilter<"payroll"> | number
    created_at?: DateTimeFilter<"payroll"> | Date | string
    period_start?: DateTimeNullableFilter<"payroll"> | Date | string | null
    period_end?: DateTimeNullableFilter<"payroll"> | Date | string | null
    absent?: IntFilter<"payroll"> | number
    employee?: XOR<EmployeesScalarRelationFilter, employeesWhereInput>
  }, "id">

  export type payrollOrderByWithAggregationInput = {
    id?: SortOrder
    payroll_id?: SortOrderInput | SortOrder
    employee_id?: SortOrder
    hours_worked?: SortOrder
    total_pay?: SortOrder
    created_at?: SortOrder
    period_start?: SortOrderInput | SortOrder
    period_end?: SortOrderInput | SortOrder
    absent?: SortOrder
    _count?: payrollCountOrderByAggregateInput
    _avg?: payrollAvgOrderByAggregateInput
    _max?: payrollMaxOrderByAggregateInput
    _min?: payrollMinOrderByAggregateInput
    _sum?: payrollSumOrderByAggregateInput
  }

  export type payrollScalarWhereWithAggregatesInput = {
    AND?: payrollScalarWhereWithAggregatesInput | payrollScalarWhereWithAggregatesInput[]
    OR?: payrollScalarWhereWithAggregatesInput[]
    NOT?: payrollScalarWhereWithAggregatesInput | payrollScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"payroll"> | number
    payroll_id?: StringNullableWithAggregatesFilter<"payroll"> | string | null
    employee_id?: StringWithAggregatesFilter<"payroll"> | string
    hours_worked?: FloatWithAggregatesFilter<"payroll"> | number
    total_pay?: FloatWithAggregatesFilter<"payroll"> | number
    created_at?: DateTimeWithAggregatesFilter<"payroll"> | Date | string
    period_start?: DateTimeNullableWithAggregatesFilter<"payroll"> | Date | string | null
    period_end?: DateTimeNullableWithAggregatesFilter<"payroll"> | Date | string | null
    absent?: IntWithAggregatesFilter<"payroll"> | number
  }

  export type smsNotificationWhereInput = {
    AND?: smsNotificationWhereInput | smsNotificationWhereInput[]
    OR?: smsNotificationWhereInput[]
    NOT?: smsNotificationWhereInput | smsNotificationWhereInput[]
    id?: IntFilter<"smsNotification"> | number
    notification_id?: StringFilter<"smsNotification"> | string
    employee_id?: StringFilter<"smsNotification"> | string
    phone_number?: StringFilter<"smsNotification"> | string
    message?: StringFilter<"smsNotification"> | string
    sent_date?: DateTimeFilter<"smsNotification"> | Date | string
    employee?: XOR<EmployeesScalarRelationFilter, employeesWhereInput>
    phoneNumber?: XOR<EmployeesScalarRelationFilter, employeesWhereInput>
  }

  export type smsNotificationOrderByWithRelationInput = {
    id?: SortOrder
    notification_id?: SortOrder
    employee_id?: SortOrder
    phone_number?: SortOrder
    message?: SortOrder
    sent_date?: SortOrder
    employee?: employeesOrderByWithRelationInput
    phoneNumber?: employeesOrderByWithRelationInput
    _relevance?: smsNotificationOrderByRelevanceInput
  }

  export type smsNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: smsNotificationWhereInput | smsNotificationWhereInput[]
    OR?: smsNotificationWhereInput[]
    NOT?: smsNotificationWhereInput | smsNotificationWhereInput[]
    notification_id?: StringFilter<"smsNotification"> | string
    employee_id?: StringFilter<"smsNotification"> | string
    phone_number?: StringFilter<"smsNotification"> | string
    message?: StringFilter<"smsNotification"> | string
    sent_date?: DateTimeFilter<"smsNotification"> | Date | string
    employee?: XOR<EmployeesScalarRelationFilter, employeesWhereInput>
    phoneNumber?: XOR<EmployeesScalarRelationFilter, employeesWhereInput>
  }, "id">

  export type smsNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    notification_id?: SortOrder
    employee_id?: SortOrder
    phone_number?: SortOrder
    message?: SortOrder
    sent_date?: SortOrder
    _count?: smsNotificationCountOrderByAggregateInput
    _avg?: smsNotificationAvgOrderByAggregateInput
    _max?: smsNotificationMaxOrderByAggregateInput
    _min?: smsNotificationMinOrderByAggregateInput
    _sum?: smsNotificationSumOrderByAggregateInput
  }

  export type smsNotificationScalarWhereWithAggregatesInput = {
    AND?: smsNotificationScalarWhereWithAggregatesInput | smsNotificationScalarWhereWithAggregatesInput[]
    OR?: smsNotificationScalarWhereWithAggregatesInput[]
    NOT?: smsNotificationScalarWhereWithAggregatesInput | smsNotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"smsNotification"> | number
    notification_id?: StringWithAggregatesFilter<"smsNotification"> | string
    employee_id?: StringWithAggregatesFilter<"smsNotification"> | string
    phone_number?: StringWithAggregatesFilter<"smsNotification"> | string
    message?: StringWithAggregatesFilter<"smsNotification"> | string
    sent_date?: DateTimeWithAggregatesFilter<"smsNotification"> | Date | string
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    user_id?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    employee_id?: StringNullableFilter<"user"> | string | null
    employee?: XOR<EmployeesNullableScalarRelationFilter, employeesWhereInput> | null
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    employee_id?: SortOrderInput | SortOrder
    employee?: employeesOrderByWithRelationInput
    _relevance?: userOrderByRelevanceInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: string
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    password?: StringFilter<"user"> | string
    employee_id?: StringNullableFilter<"user"> | string | null
    employee?: XOR<EmployeesNullableScalarRelationFilter, employeesWhereInput> | null
  }, "id" | "user_id" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    employee_id?: SortOrderInput | SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    user_id?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    employee_id?: StringNullableWithAggregatesFilter<"user"> | string | null
  }

  export type employeeRequestWhereInput = {
    AND?: employeeRequestWhereInput | employeeRequestWhereInput[]
    OR?: employeeRequestWhereInput[]
    NOT?: employeeRequestWhereInput | employeeRequestWhereInput[]
    id?: IntFilter<"employeeRequest"> | number
    name?: StringFilter<"employeeRequest"> | string
    email?: StringFilter<"employeeRequest"> | string
    password?: StringFilter<"employeeRequest"> | string
    phone_number?: StringFilter<"employeeRequest"> | string
    status?: EnumRequestStatusFilter<"employeeRequest"> | $Enums.RequestStatus
  }

  export type employeeRequestOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    status?: SortOrder
    _relevance?: employeeRequestOrderByRelevanceInput
  }

  export type employeeRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    phone_number?: string
    AND?: employeeRequestWhereInput | employeeRequestWhereInput[]
    OR?: employeeRequestWhereInput[]
    NOT?: employeeRequestWhereInput | employeeRequestWhereInput[]
    name?: StringFilter<"employeeRequest"> | string
    password?: StringFilter<"employeeRequest"> | string
    status?: EnumRequestStatusFilter<"employeeRequest"> | $Enums.RequestStatus
  }, "id" | "email" | "phone_number">

  export type employeeRequestOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    status?: SortOrder
    _count?: employeeRequestCountOrderByAggregateInput
    _avg?: employeeRequestAvgOrderByAggregateInput
    _max?: employeeRequestMaxOrderByAggregateInput
    _min?: employeeRequestMinOrderByAggregateInput
    _sum?: employeeRequestSumOrderByAggregateInput
  }

  export type employeeRequestScalarWhereWithAggregatesInput = {
    AND?: employeeRequestScalarWhereWithAggregatesInput | employeeRequestScalarWhereWithAggregatesInput[]
    OR?: employeeRequestScalarWhereWithAggregatesInput[]
    NOT?: employeeRequestScalarWhereWithAggregatesInput | employeeRequestScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"employeeRequest"> | number
    name?: StringWithAggregatesFilter<"employeeRequest"> | string
    email?: StringWithAggregatesFilter<"employeeRequest"> | string
    password?: StringWithAggregatesFilter<"employeeRequest"> | string
    phone_number?: StringWithAggregatesFilter<"employeeRequest"> | string
    status?: EnumRequestStatusWithAggregatesFilter<"employeeRequest"> | $Enums.RequestStatus
  }

  export type adminCreateInput = {
    name?: string
    email: string
    password: string
    position?: string | null
  }

  export type adminUncheckedCreateInput = {
    id?: number
    name?: string
    email: string
    password: string
    position?: string | null
  }

  export type adminUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type adminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type adminCreateManyInput = {
    id?: number
    name?: string
    email: string
    password: string
    position?: string | null
  }

  export type adminUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type adminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    position?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type attendanceCreateInput = {
    date: string
    time_in: string
    time_out?: string | null
    attendance_id: string
    hours?: number | null
    employee: employeesCreateNestedOneWithoutAttendanceInput
  }

  export type attendanceUncheckedCreateInput = {
    id?: number
    date: string
    time_in: string
    time_out?: string | null
    attendance_id: string
    employee_id: string
    hours?: number | null
  }

  export type attendanceUpdateInput = {
    date?: StringFieldUpdateOperationsInput | string
    time_in?: StringFieldUpdateOperationsInput | string
    time_out?: NullableStringFieldUpdateOperationsInput | string | null
    attendance_id?: StringFieldUpdateOperationsInput | string
    hours?: NullableIntFieldUpdateOperationsInput | number | null
    employee?: employeesUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type attendanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    time_in?: StringFieldUpdateOperationsInput | string
    time_out?: NullableStringFieldUpdateOperationsInput | string | null
    attendance_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    hours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type attendanceCreateManyInput = {
    id?: number
    date: string
    time_in: string
    time_out?: string | null
    attendance_id: string
    employee_id: string
    hours?: number | null
  }

  export type attendanceUpdateManyMutationInput = {
    date?: StringFieldUpdateOperationsInput | string
    time_in?: StringFieldUpdateOperationsInput | string
    time_out?: NullableStringFieldUpdateOperationsInput | string | null
    attendance_id?: StringFieldUpdateOperationsInput | string
    hours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type attendanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    time_in?: StringFieldUpdateOperationsInput | string
    time_out?: NullableStringFieldUpdateOperationsInput | string | null
    attendance_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    hours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type employeesCreateInput = {
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    attendance?: attendanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: leaveRequestCreateNestedManyWithoutEmployeeInput
    payrolls?: payrollCreateNestedManyWithoutEmployeeInput
    smsNotifications?: smsNotificationCreateNestedManyWithoutEmployeeInput
    phoneNumbers?: smsNotificationCreateNestedManyWithoutPhoneNumberInput
    users?: userCreateNestedManyWithoutEmployeeInput
  }

  export type employeesUncheckedCreateInput = {
    id?: number
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    attendance?: attendanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: leaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: payrollUncheckedCreateNestedManyWithoutEmployeeInput
    smsNotifications?: smsNotificationUncheckedCreateNestedManyWithoutEmployeeInput
    phoneNumbers?: smsNotificationUncheckedCreateNestedManyWithoutPhoneNumberInput
    users?: userUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type employeesUpdateInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    attendance?: attendanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: leaveRequestUpdateManyWithoutEmployeeNestedInput
    payrolls?: payrollUpdateManyWithoutEmployeeNestedInput
    smsNotifications?: smsNotificationUpdateManyWithoutEmployeeNestedInput
    phoneNumbers?: smsNotificationUpdateManyWithoutPhoneNumberNestedInput
    users?: userUpdateManyWithoutEmployeeNestedInput
  }

  export type employeesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    attendance?: attendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: leaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: payrollUncheckedUpdateManyWithoutEmployeeNestedInput
    smsNotifications?: smsNotificationUncheckedUpdateManyWithoutEmployeeNestedInput
    phoneNumbers?: smsNotificationUncheckedUpdateManyWithoutPhoneNumberNestedInput
    users?: userUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type employeesCreateManyInput = {
    id?: number
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
  }

  export type employeesUpdateManyMutationInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
  }

  export type employeesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
  }

  export type leaveRequestCreateInput = {
    leave_type: string
    reason: string
    days_requested: number
    department: string
    distribution_copy: JsonNullValueInput | InputJsonValue
    email: string
    inclusive_dates: Date | string
    name: string
    person_to_takeover: string
    position: string
    requested_by: string
    supporting_document?: string | null
    approved_by?: string | null
    received_by?: string | null
    department_head?: string | null
    hr_department?: string | null
    date_of_approve?: Date | string | null
    date_of_received?: Date | string | null
    recorded_by?: string | null
    withpay?: boolean | null
    to_date: Date | string
    created_at?: Date | string
    status?: $Enums.LeaveRequestStatus
    employee?: employeesCreateNestedOneWithoutLeaveRequestsInput
  }

  export type leaveRequestUncheckedCreateInput = {
    id?: number
    employee_id?: string | null
    leave_type: string
    reason: string
    days_requested: number
    department: string
    distribution_copy: JsonNullValueInput | InputJsonValue
    email: string
    inclusive_dates: Date | string
    name: string
    person_to_takeover: string
    position: string
    requested_by: string
    supporting_document?: string | null
    approved_by?: string | null
    received_by?: string | null
    department_head?: string | null
    hr_department?: string | null
    date_of_approve?: Date | string | null
    date_of_received?: Date | string | null
    recorded_by?: string | null
    withpay?: boolean | null
    to_date: Date | string
    created_at?: Date | string
    status?: $Enums.LeaveRequestStatus
  }

  export type leaveRequestUpdateInput = {
    leave_type?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    days_requested?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    distribution_copy?: JsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    inclusive_dates?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    person_to_takeover?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    requested_by?: StringFieldUpdateOperationsInput | string
    supporting_document?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    received_by?: NullableStringFieldUpdateOperationsInput | string | null
    department_head?: NullableStringFieldUpdateOperationsInput | string | null
    hr_department?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_approve?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_received?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recorded_by?: NullableStringFieldUpdateOperationsInput | string | null
    withpay?: NullableBoolFieldUpdateOperationsInput | boolean | null
    to_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumLeaveRequestStatusFieldUpdateOperationsInput | $Enums.LeaveRequestStatus
    employee?: employeesUpdateOneWithoutLeaveRequestsNestedInput
  }

  export type leaveRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_id?: NullableStringFieldUpdateOperationsInput | string | null
    leave_type?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    days_requested?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    distribution_copy?: JsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    inclusive_dates?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    person_to_takeover?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    requested_by?: StringFieldUpdateOperationsInput | string
    supporting_document?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    received_by?: NullableStringFieldUpdateOperationsInput | string | null
    department_head?: NullableStringFieldUpdateOperationsInput | string | null
    hr_department?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_approve?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_received?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recorded_by?: NullableStringFieldUpdateOperationsInput | string | null
    withpay?: NullableBoolFieldUpdateOperationsInput | boolean | null
    to_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumLeaveRequestStatusFieldUpdateOperationsInput | $Enums.LeaveRequestStatus
  }

  export type leaveRequestCreateManyInput = {
    id?: number
    employee_id?: string | null
    leave_type: string
    reason: string
    days_requested: number
    department: string
    distribution_copy: JsonNullValueInput | InputJsonValue
    email: string
    inclusive_dates: Date | string
    name: string
    person_to_takeover: string
    position: string
    requested_by: string
    supporting_document?: string | null
    approved_by?: string | null
    received_by?: string | null
    department_head?: string | null
    hr_department?: string | null
    date_of_approve?: Date | string | null
    date_of_received?: Date | string | null
    recorded_by?: string | null
    withpay?: boolean | null
    to_date: Date | string
    created_at?: Date | string
    status?: $Enums.LeaveRequestStatus
  }

  export type leaveRequestUpdateManyMutationInput = {
    leave_type?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    days_requested?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    distribution_copy?: JsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    inclusive_dates?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    person_to_takeover?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    requested_by?: StringFieldUpdateOperationsInput | string
    supporting_document?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    received_by?: NullableStringFieldUpdateOperationsInput | string | null
    department_head?: NullableStringFieldUpdateOperationsInput | string | null
    hr_department?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_approve?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_received?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recorded_by?: NullableStringFieldUpdateOperationsInput | string | null
    withpay?: NullableBoolFieldUpdateOperationsInput | boolean | null
    to_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumLeaveRequestStatusFieldUpdateOperationsInput | $Enums.LeaveRequestStatus
  }

  export type leaveRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_id?: NullableStringFieldUpdateOperationsInput | string | null
    leave_type?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    days_requested?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    distribution_copy?: JsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    inclusive_dates?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    person_to_takeover?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    requested_by?: StringFieldUpdateOperationsInput | string
    supporting_document?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    received_by?: NullableStringFieldUpdateOperationsInput | string | null
    department_head?: NullableStringFieldUpdateOperationsInput | string | null
    hr_department?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_approve?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_received?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recorded_by?: NullableStringFieldUpdateOperationsInput | string | null
    withpay?: NullableBoolFieldUpdateOperationsInput | boolean | null
    to_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumLeaveRequestStatusFieldUpdateOperationsInput | $Enums.LeaveRequestStatus
  }

  export type payrollCreateInput = {
    payroll_id?: string | null
    hours_worked: number
    total_pay: number
    created_at?: Date | string
    period_start?: Date | string | null
    period_end?: Date | string | null
    absent?: number
    employee: employeesCreateNestedOneWithoutPayrollsInput
  }

  export type payrollUncheckedCreateInput = {
    id?: number
    payroll_id?: string | null
    employee_id: string
    hours_worked: number
    total_pay: number
    created_at?: Date | string
    period_start?: Date | string | null
    period_end?: Date | string | null
    absent?: number
  }

  export type payrollUpdateInput = {
    payroll_id?: NullableStringFieldUpdateOperationsInput | string | null
    hours_worked?: FloatFieldUpdateOperationsInput | number
    total_pay?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    period_start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    period_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    absent?: IntFieldUpdateOperationsInput | number
    employee?: employeesUpdateOneRequiredWithoutPayrollsNestedInput
  }

  export type payrollUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    payroll_id?: NullableStringFieldUpdateOperationsInput | string | null
    employee_id?: StringFieldUpdateOperationsInput | string
    hours_worked?: FloatFieldUpdateOperationsInput | number
    total_pay?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    period_start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    period_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    absent?: IntFieldUpdateOperationsInput | number
  }

  export type payrollCreateManyInput = {
    id?: number
    payroll_id?: string | null
    employee_id: string
    hours_worked: number
    total_pay: number
    created_at?: Date | string
    period_start?: Date | string | null
    period_end?: Date | string | null
    absent?: number
  }

  export type payrollUpdateManyMutationInput = {
    payroll_id?: NullableStringFieldUpdateOperationsInput | string | null
    hours_worked?: FloatFieldUpdateOperationsInput | number
    total_pay?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    period_start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    period_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    absent?: IntFieldUpdateOperationsInput | number
  }

  export type payrollUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    payroll_id?: NullableStringFieldUpdateOperationsInput | string | null
    employee_id?: StringFieldUpdateOperationsInput | string
    hours_worked?: FloatFieldUpdateOperationsInput | number
    total_pay?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    period_start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    period_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    absent?: IntFieldUpdateOperationsInput | number
  }

  export type smsNotificationCreateInput = {
    notification_id: string
    message: string
    sent_date?: Date | string
    employee: employeesCreateNestedOneWithoutSmsNotificationsInput
    phoneNumber: employeesCreateNestedOneWithoutPhoneNumbersInput
  }

  export type smsNotificationUncheckedCreateInput = {
    id?: number
    notification_id: string
    employee_id: string
    phone_number: string
    message: string
    sent_date?: Date | string
  }

  export type smsNotificationUpdateInput = {
    notification_id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sent_date?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: employeesUpdateOneRequiredWithoutSmsNotificationsNestedInput
    phoneNumber?: employeesUpdateOneRequiredWithoutPhoneNumbersNestedInput
  }

  export type smsNotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    notification_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sent_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type smsNotificationCreateManyInput = {
    id?: number
    notification_id: string
    employee_id: string
    phone_number: string
    message: string
    sent_date?: Date | string
  }

  export type smsNotificationUpdateManyMutationInput = {
    notification_id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sent_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type smsNotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    notification_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sent_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCreateInput = {
    user_id: string
    email: string
    password: string
    employee?: employeesCreateNestedOneWithoutUsersInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    user_id: string
    email: string
    password: string
    employee_id?: string | null
  }

  export type userUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    employee?: employeesUpdateOneWithoutUsersNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    employee_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userCreateManyInput = {
    id?: number
    user_id: string
    email: string
    password: string
    employee_id?: string | null
  }

  export type userUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    employee_id?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type employeeRequestCreateInput = {
    name: string
    email: string
    password: string
    phone_number: string
    status?: $Enums.RequestStatus
  }

  export type employeeRequestUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    phone_number: string
    status?: $Enums.RequestStatus
  }

  export type employeeRequestUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  }

  export type employeeRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  }

  export type employeeRequestCreateManyInput = {
    id?: number
    name: string
    email: string
    password: string
    phone_number: string
    status?: $Enums.RequestStatus
  }

  export type employeeRequestUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  }

  export type employeeRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    status?: EnumRequestStatusFieldUpdateOperationsInput | $Enums.RequestStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type adminOrderByRelevanceInput = {
    fields: adminOrderByRelevanceFieldEnum | adminOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type adminCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    position?: SortOrder
  }

  export type adminAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type adminMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    position?: SortOrder
  }

  export type adminMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    position?: SortOrder
  }

  export type adminSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EmployeesScalarRelationFilter = {
    is?: employeesWhereInput
    isNot?: employeesWhereInput
  }

  export type attendanceOrderByRelevanceInput = {
    fields: attendanceOrderByRelevanceFieldEnum | attendanceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type attendanceCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    time_in?: SortOrder
    time_out?: SortOrder
    attendance_id?: SortOrder
    employee_id?: SortOrder
    hours?: SortOrder
  }

  export type attendanceAvgOrderByAggregateInput = {
    id?: SortOrder
    hours?: SortOrder
  }

  export type attendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    time_in?: SortOrder
    time_out?: SortOrder
    attendance_id?: SortOrder
    employee_id?: SortOrder
    hours?: SortOrder
  }

  export type attendanceMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    time_in?: SortOrder
    time_out?: SortOrder
    attendance_id?: SortOrder
    employee_id?: SortOrder
    hours?: SortOrder
  }

  export type attendanceSumOrderByAggregateInput = {
    id?: SortOrder
    hours?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type AttendanceListRelationFilter = {
    every?: attendanceWhereInput
    some?: attendanceWhereInput
    none?: attendanceWhereInput
  }

  export type LeaveRequestListRelationFilter = {
    every?: leaveRequestWhereInput
    some?: leaveRequestWhereInput
    none?: leaveRequestWhereInput
  }

  export type PayrollListRelationFilter = {
    every?: payrollWhereInput
    some?: payrollWhereInput
    none?: payrollWhereInput
  }

  export type SmsNotificationListRelationFilter = {
    every?: smsNotificationWhereInput
    some?: smsNotificationWhereInput
    none?: smsNotificationWhereInput
  }

  export type UserListRelationFilter = {
    every?: userWhereInput
    some?: userWhereInput
    none?: userWhereInput
  }

  export type attendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type leaveRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type payrollOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type smsNotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type employeesOrderByRelevanceInput = {
    fields: employeesOrderByRelevanceFieldEnum | employeesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type employeesCountOrderByAggregateInput = {
    id?: SortOrder
    employee_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    department?: SortOrder
    position?: SortOrder
    qrcode?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    basicSalary?: SortOrder
    totalSalary?: SortOrder
    monthSalary?: SortOrder
    password?: SortOrder
    hierarchy?: SortOrder
    day_off?: SortOrder
    leaveCredits?: SortOrder
  }

  export type employeesAvgOrderByAggregateInput = {
    id?: SortOrder
    basicSalary?: SortOrder
    totalSalary?: SortOrder
    monthSalary?: SortOrder
    leaveCredits?: SortOrder
  }

  export type employeesMaxOrderByAggregateInput = {
    id?: SortOrder
    employee_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    department?: SortOrder
    position?: SortOrder
    qrcode?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    basicSalary?: SortOrder
    totalSalary?: SortOrder
    monthSalary?: SortOrder
    password?: SortOrder
    hierarchy?: SortOrder
    day_off?: SortOrder
    leaveCredits?: SortOrder
  }

  export type employeesMinOrderByAggregateInput = {
    id?: SortOrder
    employee_id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    department?: SortOrder
    position?: SortOrder
    qrcode?: SortOrder
    avatar?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    basicSalary?: SortOrder
    totalSalary?: SortOrder
    monthSalary?: SortOrder
    password?: SortOrder
    hierarchy?: SortOrder
    day_off?: SortOrder
    leaveCredits?: SortOrder
  }

  export type employeesSumOrderByAggregateInput = {
    id?: SortOrder
    basicSalary?: SortOrder
    totalSalary?: SortOrder
    monthSalary?: SortOrder
    leaveCredits?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumLeaveRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaveRequestStatus | EnumLeaveRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LeaveRequestStatus[]
    notIn?: $Enums.LeaveRequestStatus[]
    not?: NestedEnumLeaveRequestStatusFilter<$PrismaModel> | $Enums.LeaveRequestStatus
  }

  export type EmployeesNullableScalarRelationFilter = {
    is?: employeesWhereInput | null
    isNot?: employeesWhereInput | null
  }

  export type leaveRequestOrderByRelevanceInput = {
    fields: leaveRequestOrderByRelevanceFieldEnum | leaveRequestOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type leaveRequestCountOrderByAggregateInput = {
    id?: SortOrder
    employee_id?: SortOrder
    leave_type?: SortOrder
    reason?: SortOrder
    days_requested?: SortOrder
    department?: SortOrder
    distribution_copy?: SortOrder
    email?: SortOrder
    inclusive_dates?: SortOrder
    name?: SortOrder
    person_to_takeover?: SortOrder
    position?: SortOrder
    requested_by?: SortOrder
    supporting_document?: SortOrder
    approved_by?: SortOrder
    received_by?: SortOrder
    department_head?: SortOrder
    hr_department?: SortOrder
    date_of_approve?: SortOrder
    date_of_received?: SortOrder
    recorded_by?: SortOrder
    withpay?: SortOrder
    to_date?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
  }

  export type leaveRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    days_requested?: SortOrder
  }

  export type leaveRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    employee_id?: SortOrder
    leave_type?: SortOrder
    reason?: SortOrder
    days_requested?: SortOrder
    department?: SortOrder
    email?: SortOrder
    inclusive_dates?: SortOrder
    name?: SortOrder
    person_to_takeover?: SortOrder
    position?: SortOrder
    requested_by?: SortOrder
    supporting_document?: SortOrder
    approved_by?: SortOrder
    received_by?: SortOrder
    department_head?: SortOrder
    hr_department?: SortOrder
    date_of_approve?: SortOrder
    date_of_received?: SortOrder
    recorded_by?: SortOrder
    withpay?: SortOrder
    to_date?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
  }

  export type leaveRequestMinOrderByAggregateInput = {
    id?: SortOrder
    employee_id?: SortOrder
    leave_type?: SortOrder
    reason?: SortOrder
    days_requested?: SortOrder
    department?: SortOrder
    email?: SortOrder
    inclusive_dates?: SortOrder
    name?: SortOrder
    person_to_takeover?: SortOrder
    position?: SortOrder
    requested_by?: SortOrder
    supporting_document?: SortOrder
    approved_by?: SortOrder
    received_by?: SortOrder
    department_head?: SortOrder
    hr_department?: SortOrder
    date_of_approve?: SortOrder
    date_of_received?: SortOrder
    recorded_by?: SortOrder
    withpay?: SortOrder
    to_date?: SortOrder
    created_at?: SortOrder
    status?: SortOrder
  }

  export type leaveRequestSumOrderByAggregateInput = {
    id?: SortOrder
    days_requested?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumLeaveRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaveRequestStatus | EnumLeaveRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LeaveRequestStatus[]
    notIn?: $Enums.LeaveRequestStatus[]
    not?: NestedEnumLeaveRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.LeaveRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLeaveRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumLeaveRequestStatusFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type payrollOrderByRelevanceInput = {
    fields: payrollOrderByRelevanceFieldEnum | payrollOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type payrollCountOrderByAggregateInput = {
    id?: SortOrder
    payroll_id?: SortOrder
    employee_id?: SortOrder
    hours_worked?: SortOrder
    total_pay?: SortOrder
    created_at?: SortOrder
    period_start?: SortOrder
    period_end?: SortOrder
    absent?: SortOrder
  }

  export type payrollAvgOrderByAggregateInput = {
    id?: SortOrder
    hours_worked?: SortOrder
    total_pay?: SortOrder
    absent?: SortOrder
  }

  export type payrollMaxOrderByAggregateInput = {
    id?: SortOrder
    payroll_id?: SortOrder
    employee_id?: SortOrder
    hours_worked?: SortOrder
    total_pay?: SortOrder
    created_at?: SortOrder
    period_start?: SortOrder
    period_end?: SortOrder
    absent?: SortOrder
  }

  export type payrollMinOrderByAggregateInput = {
    id?: SortOrder
    payroll_id?: SortOrder
    employee_id?: SortOrder
    hours_worked?: SortOrder
    total_pay?: SortOrder
    created_at?: SortOrder
    period_start?: SortOrder
    period_end?: SortOrder
    absent?: SortOrder
  }

  export type payrollSumOrderByAggregateInput = {
    id?: SortOrder
    hours_worked?: SortOrder
    total_pay?: SortOrder
    absent?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type smsNotificationOrderByRelevanceInput = {
    fields: smsNotificationOrderByRelevanceFieldEnum | smsNotificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type smsNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    notification_id?: SortOrder
    employee_id?: SortOrder
    phone_number?: SortOrder
    message?: SortOrder
    sent_date?: SortOrder
  }

  export type smsNotificationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type smsNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    notification_id?: SortOrder
    employee_id?: SortOrder
    phone_number?: SortOrder
    message?: SortOrder
    sent_date?: SortOrder
  }

  export type smsNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    notification_id?: SortOrder
    employee_id?: SortOrder
    phone_number?: SortOrder
    message?: SortOrder
    sent_date?: SortOrder
  }

  export type smsNotificationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userOrderByRelevanceInput = {
    fields: userOrderByRelevanceFieldEnum | userOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    employee_id?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    employee_id?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    employee_id?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[]
    notIn?: $Enums.RequestStatus[]
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type employeeRequestOrderByRelevanceInput = {
    fields: employeeRequestOrderByRelevanceFieldEnum | employeeRequestOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type employeeRequestCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    status?: SortOrder
  }

  export type employeeRequestAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type employeeRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    status?: SortOrder
  }

  export type employeeRequestMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    status?: SortOrder
  }

  export type employeeRequestSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[]
    notIn?: $Enums.RequestStatus[]
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type employeesCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<employeesCreateWithoutAttendanceInput, employeesUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: employeesCreateOrConnectWithoutAttendanceInput
    connect?: employeesWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type employeesUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<employeesCreateWithoutAttendanceInput, employeesUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: employeesCreateOrConnectWithoutAttendanceInput
    upsert?: employeesUpsertWithoutAttendanceInput
    connect?: employeesWhereUniqueInput
    update?: XOR<XOR<employeesUpdateToOneWithWhereWithoutAttendanceInput, employeesUpdateWithoutAttendanceInput>, employeesUncheckedUpdateWithoutAttendanceInput>
  }

  export type attendanceCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<attendanceCreateWithoutEmployeeInput, attendanceUncheckedCreateWithoutEmployeeInput> | attendanceCreateWithoutEmployeeInput[] | attendanceUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutEmployeeInput | attendanceCreateOrConnectWithoutEmployeeInput[]
    createMany?: attendanceCreateManyEmployeeInputEnvelope
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
  }

  export type leaveRequestCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<leaveRequestCreateWithoutEmployeeInput, leaveRequestUncheckedCreateWithoutEmployeeInput> | leaveRequestCreateWithoutEmployeeInput[] | leaveRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: leaveRequestCreateOrConnectWithoutEmployeeInput | leaveRequestCreateOrConnectWithoutEmployeeInput[]
    createMany?: leaveRequestCreateManyEmployeeInputEnvelope
    connect?: leaveRequestWhereUniqueInput | leaveRequestWhereUniqueInput[]
  }

  export type payrollCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<payrollCreateWithoutEmployeeInput, payrollUncheckedCreateWithoutEmployeeInput> | payrollCreateWithoutEmployeeInput[] | payrollUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: payrollCreateOrConnectWithoutEmployeeInput | payrollCreateOrConnectWithoutEmployeeInput[]
    createMany?: payrollCreateManyEmployeeInputEnvelope
    connect?: payrollWhereUniqueInput | payrollWhereUniqueInput[]
  }

  export type smsNotificationCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<smsNotificationCreateWithoutEmployeeInput, smsNotificationUncheckedCreateWithoutEmployeeInput> | smsNotificationCreateWithoutEmployeeInput[] | smsNotificationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: smsNotificationCreateOrConnectWithoutEmployeeInput | smsNotificationCreateOrConnectWithoutEmployeeInput[]
    createMany?: smsNotificationCreateManyEmployeeInputEnvelope
    connect?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
  }

  export type smsNotificationCreateNestedManyWithoutPhoneNumberInput = {
    create?: XOR<smsNotificationCreateWithoutPhoneNumberInput, smsNotificationUncheckedCreateWithoutPhoneNumberInput> | smsNotificationCreateWithoutPhoneNumberInput[] | smsNotificationUncheckedCreateWithoutPhoneNumberInput[]
    connectOrCreate?: smsNotificationCreateOrConnectWithoutPhoneNumberInput | smsNotificationCreateOrConnectWithoutPhoneNumberInput[]
    createMany?: smsNotificationCreateManyPhoneNumberInputEnvelope
    connect?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
  }

  export type userCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<userCreateWithoutEmployeeInput, userUncheckedCreateWithoutEmployeeInput> | userCreateWithoutEmployeeInput[] | userUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: userCreateOrConnectWithoutEmployeeInput | userCreateOrConnectWithoutEmployeeInput[]
    createMany?: userCreateManyEmployeeInputEnvelope
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type attendanceUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<attendanceCreateWithoutEmployeeInput, attendanceUncheckedCreateWithoutEmployeeInput> | attendanceCreateWithoutEmployeeInput[] | attendanceUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutEmployeeInput | attendanceCreateOrConnectWithoutEmployeeInput[]
    createMany?: attendanceCreateManyEmployeeInputEnvelope
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
  }

  export type leaveRequestUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<leaveRequestCreateWithoutEmployeeInput, leaveRequestUncheckedCreateWithoutEmployeeInput> | leaveRequestCreateWithoutEmployeeInput[] | leaveRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: leaveRequestCreateOrConnectWithoutEmployeeInput | leaveRequestCreateOrConnectWithoutEmployeeInput[]
    createMany?: leaveRequestCreateManyEmployeeInputEnvelope
    connect?: leaveRequestWhereUniqueInput | leaveRequestWhereUniqueInput[]
  }

  export type payrollUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<payrollCreateWithoutEmployeeInput, payrollUncheckedCreateWithoutEmployeeInput> | payrollCreateWithoutEmployeeInput[] | payrollUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: payrollCreateOrConnectWithoutEmployeeInput | payrollCreateOrConnectWithoutEmployeeInput[]
    createMany?: payrollCreateManyEmployeeInputEnvelope
    connect?: payrollWhereUniqueInput | payrollWhereUniqueInput[]
  }

  export type smsNotificationUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<smsNotificationCreateWithoutEmployeeInput, smsNotificationUncheckedCreateWithoutEmployeeInput> | smsNotificationCreateWithoutEmployeeInput[] | smsNotificationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: smsNotificationCreateOrConnectWithoutEmployeeInput | smsNotificationCreateOrConnectWithoutEmployeeInput[]
    createMany?: smsNotificationCreateManyEmployeeInputEnvelope
    connect?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
  }

  export type smsNotificationUncheckedCreateNestedManyWithoutPhoneNumberInput = {
    create?: XOR<smsNotificationCreateWithoutPhoneNumberInput, smsNotificationUncheckedCreateWithoutPhoneNumberInput> | smsNotificationCreateWithoutPhoneNumberInput[] | smsNotificationUncheckedCreateWithoutPhoneNumberInput[]
    connectOrCreate?: smsNotificationCreateOrConnectWithoutPhoneNumberInput | smsNotificationCreateOrConnectWithoutPhoneNumberInput[]
    createMany?: smsNotificationCreateManyPhoneNumberInputEnvelope
    connect?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
  }

  export type userUncheckedCreateNestedManyWithoutEmployeeInput = {
    create?: XOR<userCreateWithoutEmployeeInput, userUncheckedCreateWithoutEmployeeInput> | userCreateWithoutEmployeeInput[] | userUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: userCreateOrConnectWithoutEmployeeInput | userCreateOrConnectWithoutEmployeeInput[]
    createMany?: userCreateManyEmployeeInputEnvelope
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type attendanceUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<attendanceCreateWithoutEmployeeInput, attendanceUncheckedCreateWithoutEmployeeInput> | attendanceCreateWithoutEmployeeInput[] | attendanceUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutEmployeeInput | attendanceCreateOrConnectWithoutEmployeeInput[]
    upsert?: attendanceUpsertWithWhereUniqueWithoutEmployeeInput | attendanceUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: attendanceCreateManyEmployeeInputEnvelope
    set?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    disconnect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    delete?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    update?: attendanceUpdateWithWhereUniqueWithoutEmployeeInput | attendanceUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: attendanceUpdateManyWithWhereWithoutEmployeeInput | attendanceUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
  }

  export type leaveRequestUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<leaveRequestCreateWithoutEmployeeInput, leaveRequestUncheckedCreateWithoutEmployeeInput> | leaveRequestCreateWithoutEmployeeInput[] | leaveRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: leaveRequestCreateOrConnectWithoutEmployeeInput | leaveRequestCreateOrConnectWithoutEmployeeInput[]
    upsert?: leaveRequestUpsertWithWhereUniqueWithoutEmployeeInput | leaveRequestUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: leaveRequestCreateManyEmployeeInputEnvelope
    set?: leaveRequestWhereUniqueInput | leaveRequestWhereUniqueInput[]
    disconnect?: leaveRequestWhereUniqueInput | leaveRequestWhereUniqueInput[]
    delete?: leaveRequestWhereUniqueInput | leaveRequestWhereUniqueInput[]
    connect?: leaveRequestWhereUniqueInput | leaveRequestWhereUniqueInput[]
    update?: leaveRequestUpdateWithWhereUniqueWithoutEmployeeInput | leaveRequestUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: leaveRequestUpdateManyWithWhereWithoutEmployeeInput | leaveRequestUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: leaveRequestScalarWhereInput | leaveRequestScalarWhereInput[]
  }

  export type payrollUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<payrollCreateWithoutEmployeeInput, payrollUncheckedCreateWithoutEmployeeInput> | payrollCreateWithoutEmployeeInput[] | payrollUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: payrollCreateOrConnectWithoutEmployeeInput | payrollCreateOrConnectWithoutEmployeeInput[]
    upsert?: payrollUpsertWithWhereUniqueWithoutEmployeeInput | payrollUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: payrollCreateManyEmployeeInputEnvelope
    set?: payrollWhereUniqueInput | payrollWhereUniqueInput[]
    disconnect?: payrollWhereUniqueInput | payrollWhereUniqueInput[]
    delete?: payrollWhereUniqueInput | payrollWhereUniqueInput[]
    connect?: payrollWhereUniqueInput | payrollWhereUniqueInput[]
    update?: payrollUpdateWithWhereUniqueWithoutEmployeeInput | payrollUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: payrollUpdateManyWithWhereWithoutEmployeeInput | payrollUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: payrollScalarWhereInput | payrollScalarWhereInput[]
  }

  export type smsNotificationUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<smsNotificationCreateWithoutEmployeeInput, smsNotificationUncheckedCreateWithoutEmployeeInput> | smsNotificationCreateWithoutEmployeeInput[] | smsNotificationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: smsNotificationCreateOrConnectWithoutEmployeeInput | smsNotificationCreateOrConnectWithoutEmployeeInput[]
    upsert?: smsNotificationUpsertWithWhereUniqueWithoutEmployeeInput | smsNotificationUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: smsNotificationCreateManyEmployeeInputEnvelope
    set?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    disconnect?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    delete?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    connect?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    update?: smsNotificationUpdateWithWhereUniqueWithoutEmployeeInput | smsNotificationUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: smsNotificationUpdateManyWithWhereWithoutEmployeeInput | smsNotificationUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: smsNotificationScalarWhereInput | smsNotificationScalarWhereInput[]
  }

  export type smsNotificationUpdateManyWithoutPhoneNumberNestedInput = {
    create?: XOR<smsNotificationCreateWithoutPhoneNumberInput, smsNotificationUncheckedCreateWithoutPhoneNumberInput> | smsNotificationCreateWithoutPhoneNumberInput[] | smsNotificationUncheckedCreateWithoutPhoneNumberInput[]
    connectOrCreate?: smsNotificationCreateOrConnectWithoutPhoneNumberInput | smsNotificationCreateOrConnectWithoutPhoneNumberInput[]
    upsert?: smsNotificationUpsertWithWhereUniqueWithoutPhoneNumberInput | smsNotificationUpsertWithWhereUniqueWithoutPhoneNumberInput[]
    createMany?: smsNotificationCreateManyPhoneNumberInputEnvelope
    set?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    disconnect?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    delete?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    connect?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    update?: smsNotificationUpdateWithWhereUniqueWithoutPhoneNumberInput | smsNotificationUpdateWithWhereUniqueWithoutPhoneNumberInput[]
    updateMany?: smsNotificationUpdateManyWithWhereWithoutPhoneNumberInput | smsNotificationUpdateManyWithWhereWithoutPhoneNumberInput[]
    deleteMany?: smsNotificationScalarWhereInput | smsNotificationScalarWhereInput[]
  }

  export type userUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<userCreateWithoutEmployeeInput, userUncheckedCreateWithoutEmployeeInput> | userCreateWithoutEmployeeInput[] | userUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: userCreateOrConnectWithoutEmployeeInput | userCreateOrConnectWithoutEmployeeInput[]
    upsert?: userUpsertWithWhereUniqueWithoutEmployeeInput | userUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: userCreateManyEmployeeInputEnvelope
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutEmployeeInput | userUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: userUpdateManyWithWhereWithoutEmployeeInput | userUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type attendanceUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<attendanceCreateWithoutEmployeeInput, attendanceUncheckedCreateWithoutEmployeeInput> | attendanceCreateWithoutEmployeeInput[] | attendanceUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: attendanceCreateOrConnectWithoutEmployeeInput | attendanceCreateOrConnectWithoutEmployeeInput[]
    upsert?: attendanceUpsertWithWhereUniqueWithoutEmployeeInput | attendanceUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: attendanceCreateManyEmployeeInputEnvelope
    set?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    disconnect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    delete?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    connect?: attendanceWhereUniqueInput | attendanceWhereUniqueInput[]
    update?: attendanceUpdateWithWhereUniqueWithoutEmployeeInput | attendanceUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: attendanceUpdateManyWithWhereWithoutEmployeeInput | attendanceUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
  }

  export type leaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<leaveRequestCreateWithoutEmployeeInput, leaveRequestUncheckedCreateWithoutEmployeeInput> | leaveRequestCreateWithoutEmployeeInput[] | leaveRequestUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: leaveRequestCreateOrConnectWithoutEmployeeInput | leaveRequestCreateOrConnectWithoutEmployeeInput[]
    upsert?: leaveRequestUpsertWithWhereUniqueWithoutEmployeeInput | leaveRequestUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: leaveRequestCreateManyEmployeeInputEnvelope
    set?: leaveRequestWhereUniqueInput | leaveRequestWhereUniqueInput[]
    disconnect?: leaveRequestWhereUniqueInput | leaveRequestWhereUniqueInput[]
    delete?: leaveRequestWhereUniqueInput | leaveRequestWhereUniqueInput[]
    connect?: leaveRequestWhereUniqueInput | leaveRequestWhereUniqueInput[]
    update?: leaveRequestUpdateWithWhereUniqueWithoutEmployeeInput | leaveRequestUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: leaveRequestUpdateManyWithWhereWithoutEmployeeInput | leaveRequestUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: leaveRequestScalarWhereInput | leaveRequestScalarWhereInput[]
  }

  export type payrollUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<payrollCreateWithoutEmployeeInput, payrollUncheckedCreateWithoutEmployeeInput> | payrollCreateWithoutEmployeeInput[] | payrollUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: payrollCreateOrConnectWithoutEmployeeInput | payrollCreateOrConnectWithoutEmployeeInput[]
    upsert?: payrollUpsertWithWhereUniqueWithoutEmployeeInput | payrollUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: payrollCreateManyEmployeeInputEnvelope
    set?: payrollWhereUniqueInput | payrollWhereUniqueInput[]
    disconnect?: payrollWhereUniqueInput | payrollWhereUniqueInput[]
    delete?: payrollWhereUniqueInput | payrollWhereUniqueInput[]
    connect?: payrollWhereUniqueInput | payrollWhereUniqueInput[]
    update?: payrollUpdateWithWhereUniqueWithoutEmployeeInput | payrollUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: payrollUpdateManyWithWhereWithoutEmployeeInput | payrollUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: payrollScalarWhereInput | payrollScalarWhereInput[]
  }

  export type smsNotificationUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<smsNotificationCreateWithoutEmployeeInput, smsNotificationUncheckedCreateWithoutEmployeeInput> | smsNotificationCreateWithoutEmployeeInput[] | smsNotificationUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: smsNotificationCreateOrConnectWithoutEmployeeInput | smsNotificationCreateOrConnectWithoutEmployeeInput[]
    upsert?: smsNotificationUpsertWithWhereUniqueWithoutEmployeeInput | smsNotificationUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: smsNotificationCreateManyEmployeeInputEnvelope
    set?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    disconnect?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    delete?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    connect?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    update?: smsNotificationUpdateWithWhereUniqueWithoutEmployeeInput | smsNotificationUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: smsNotificationUpdateManyWithWhereWithoutEmployeeInput | smsNotificationUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: smsNotificationScalarWhereInput | smsNotificationScalarWhereInput[]
  }

  export type smsNotificationUncheckedUpdateManyWithoutPhoneNumberNestedInput = {
    create?: XOR<smsNotificationCreateWithoutPhoneNumberInput, smsNotificationUncheckedCreateWithoutPhoneNumberInput> | smsNotificationCreateWithoutPhoneNumberInput[] | smsNotificationUncheckedCreateWithoutPhoneNumberInput[]
    connectOrCreate?: smsNotificationCreateOrConnectWithoutPhoneNumberInput | smsNotificationCreateOrConnectWithoutPhoneNumberInput[]
    upsert?: smsNotificationUpsertWithWhereUniqueWithoutPhoneNumberInput | smsNotificationUpsertWithWhereUniqueWithoutPhoneNumberInput[]
    createMany?: smsNotificationCreateManyPhoneNumberInputEnvelope
    set?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    disconnect?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    delete?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    connect?: smsNotificationWhereUniqueInput | smsNotificationWhereUniqueInput[]
    update?: smsNotificationUpdateWithWhereUniqueWithoutPhoneNumberInput | smsNotificationUpdateWithWhereUniqueWithoutPhoneNumberInput[]
    updateMany?: smsNotificationUpdateManyWithWhereWithoutPhoneNumberInput | smsNotificationUpdateManyWithWhereWithoutPhoneNumberInput[]
    deleteMany?: smsNotificationScalarWhereInput | smsNotificationScalarWhereInput[]
  }

  export type userUncheckedUpdateManyWithoutEmployeeNestedInput = {
    create?: XOR<userCreateWithoutEmployeeInput, userUncheckedCreateWithoutEmployeeInput> | userCreateWithoutEmployeeInput[] | userUncheckedCreateWithoutEmployeeInput[]
    connectOrCreate?: userCreateOrConnectWithoutEmployeeInput | userCreateOrConnectWithoutEmployeeInput[]
    upsert?: userUpsertWithWhereUniqueWithoutEmployeeInput | userUpsertWithWhereUniqueWithoutEmployeeInput[]
    createMany?: userCreateManyEmployeeInputEnvelope
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutEmployeeInput | userUpdateWithWhereUniqueWithoutEmployeeInput[]
    updateMany?: userUpdateManyWithWhereWithoutEmployeeInput | userUpdateManyWithWhereWithoutEmployeeInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type employeesCreateNestedOneWithoutLeaveRequestsInput = {
    create?: XOR<employeesCreateWithoutLeaveRequestsInput, employeesUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: employeesCreateOrConnectWithoutLeaveRequestsInput
    connect?: employeesWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumLeaveRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.LeaveRequestStatus
  }

  export type employeesUpdateOneWithoutLeaveRequestsNestedInput = {
    create?: XOR<employeesCreateWithoutLeaveRequestsInput, employeesUncheckedCreateWithoutLeaveRequestsInput>
    connectOrCreate?: employeesCreateOrConnectWithoutLeaveRequestsInput
    upsert?: employeesUpsertWithoutLeaveRequestsInput
    disconnect?: employeesWhereInput | boolean
    delete?: employeesWhereInput | boolean
    connect?: employeesWhereUniqueInput
    update?: XOR<XOR<employeesUpdateToOneWithWhereWithoutLeaveRequestsInput, employeesUpdateWithoutLeaveRequestsInput>, employeesUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type employeesCreateNestedOneWithoutPayrollsInput = {
    create?: XOR<employeesCreateWithoutPayrollsInput, employeesUncheckedCreateWithoutPayrollsInput>
    connectOrCreate?: employeesCreateOrConnectWithoutPayrollsInput
    connect?: employeesWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type employeesUpdateOneRequiredWithoutPayrollsNestedInput = {
    create?: XOR<employeesCreateWithoutPayrollsInput, employeesUncheckedCreateWithoutPayrollsInput>
    connectOrCreate?: employeesCreateOrConnectWithoutPayrollsInput
    upsert?: employeesUpsertWithoutPayrollsInput
    connect?: employeesWhereUniqueInput
    update?: XOR<XOR<employeesUpdateToOneWithWhereWithoutPayrollsInput, employeesUpdateWithoutPayrollsInput>, employeesUncheckedUpdateWithoutPayrollsInput>
  }

  export type employeesCreateNestedOneWithoutSmsNotificationsInput = {
    create?: XOR<employeesCreateWithoutSmsNotificationsInput, employeesUncheckedCreateWithoutSmsNotificationsInput>
    connectOrCreate?: employeesCreateOrConnectWithoutSmsNotificationsInput
    connect?: employeesWhereUniqueInput
  }

  export type employeesCreateNestedOneWithoutPhoneNumbersInput = {
    create?: XOR<employeesCreateWithoutPhoneNumbersInput, employeesUncheckedCreateWithoutPhoneNumbersInput>
    connectOrCreate?: employeesCreateOrConnectWithoutPhoneNumbersInput
    connect?: employeesWhereUniqueInput
  }

  export type employeesUpdateOneRequiredWithoutSmsNotificationsNestedInput = {
    create?: XOR<employeesCreateWithoutSmsNotificationsInput, employeesUncheckedCreateWithoutSmsNotificationsInput>
    connectOrCreate?: employeesCreateOrConnectWithoutSmsNotificationsInput
    upsert?: employeesUpsertWithoutSmsNotificationsInput
    connect?: employeesWhereUniqueInput
    update?: XOR<XOR<employeesUpdateToOneWithWhereWithoutSmsNotificationsInput, employeesUpdateWithoutSmsNotificationsInput>, employeesUncheckedUpdateWithoutSmsNotificationsInput>
  }

  export type employeesUpdateOneRequiredWithoutPhoneNumbersNestedInput = {
    create?: XOR<employeesCreateWithoutPhoneNumbersInput, employeesUncheckedCreateWithoutPhoneNumbersInput>
    connectOrCreate?: employeesCreateOrConnectWithoutPhoneNumbersInput
    upsert?: employeesUpsertWithoutPhoneNumbersInput
    connect?: employeesWhereUniqueInput
    update?: XOR<XOR<employeesUpdateToOneWithWhereWithoutPhoneNumbersInput, employeesUpdateWithoutPhoneNumbersInput>, employeesUncheckedUpdateWithoutPhoneNumbersInput>
  }

  export type employeesCreateNestedOneWithoutUsersInput = {
    create?: XOR<employeesCreateWithoutUsersInput, employeesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: employeesCreateOrConnectWithoutUsersInput
    connect?: employeesWhereUniqueInput
  }

  export type employeesUpdateOneWithoutUsersNestedInput = {
    create?: XOR<employeesCreateWithoutUsersInput, employeesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: employeesCreateOrConnectWithoutUsersInput
    upsert?: employeesUpsertWithoutUsersInput
    disconnect?: employeesWhereInput | boolean
    delete?: employeesWhereInput | boolean
    connect?: employeesWhereUniqueInput
    update?: XOR<XOR<employeesUpdateToOneWithWhereWithoutUsersInput, employeesUpdateWithoutUsersInput>, employeesUncheckedUpdateWithoutUsersInput>
  }

  export type EnumRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.RequestStatus
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumLeaveRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaveRequestStatus | EnumLeaveRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LeaveRequestStatus[]
    notIn?: $Enums.LeaveRequestStatus[]
    not?: NestedEnumLeaveRequestStatusFilter<$PrismaModel> | $Enums.LeaveRequestStatus
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumLeaveRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeaveRequestStatus | EnumLeaveRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LeaveRequestStatus[]
    notIn?: $Enums.LeaveRequestStatus[]
    not?: NestedEnumLeaveRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.LeaveRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLeaveRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumLeaveRequestStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[]
    notIn?: $Enums.RequestStatus[]
    not?: NestedEnumRequestStatusFilter<$PrismaModel> | $Enums.RequestStatus
  }

  export type NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RequestStatus | EnumRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.RequestStatus[]
    notIn?: $Enums.RequestStatus[]
    not?: NestedEnumRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.RequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumRequestStatusFilter<$PrismaModel>
  }

  export type employeesCreateWithoutAttendanceInput = {
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    leaveRequests?: leaveRequestCreateNestedManyWithoutEmployeeInput
    payrolls?: payrollCreateNestedManyWithoutEmployeeInput
    smsNotifications?: smsNotificationCreateNestedManyWithoutEmployeeInput
    phoneNumbers?: smsNotificationCreateNestedManyWithoutPhoneNumberInput
    users?: userCreateNestedManyWithoutEmployeeInput
  }

  export type employeesUncheckedCreateWithoutAttendanceInput = {
    id?: number
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    leaveRequests?: leaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: payrollUncheckedCreateNestedManyWithoutEmployeeInput
    smsNotifications?: smsNotificationUncheckedCreateNestedManyWithoutEmployeeInput
    phoneNumbers?: smsNotificationUncheckedCreateNestedManyWithoutPhoneNumberInput
    users?: userUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type employeesCreateOrConnectWithoutAttendanceInput = {
    where: employeesWhereUniqueInput
    create: XOR<employeesCreateWithoutAttendanceInput, employeesUncheckedCreateWithoutAttendanceInput>
  }

  export type employeesUpsertWithoutAttendanceInput = {
    update: XOR<employeesUpdateWithoutAttendanceInput, employeesUncheckedUpdateWithoutAttendanceInput>
    create: XOR<employeesCreateWithoutAttendanceInput, employeesUncheckedCreateWithoutAttendanceInput>
    where?: employeesWhereInput
  }

  export type employeesUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: employeesWhereInput
    data: XOR<employeesUpdateWithoutAttendanceInput, employeesUncheckedUpdateWithoutAttendanceInput>
  }

  export type employeesUpdateWithoutAttendanceInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    leaveRequests?: leaveRequestUpdateManyWithoutEmployeeNestedInput
    payrolls?: payrollUpdateManyWithoutEmployeeNestedInput
    smsNotifications?: smsNotificationUpdateManyWithoutEmployeeNestedInput
    phoneNumbers?: smsNotificationUpdateManyWithoutPhoneNumberNestedInput
    users?: userUpdateManyWithoutEmployeeNestedInput
  }

  export type employeesUncheckedUpdateWithoutAttendanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    leaveRequests?: leaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: payrollUncheckedUpdateManyWithoutEmployeeNestedInput
    smsNotifications?: smsNotificationUncheckedUpdateManyWithoutEmployeeNestedInput
    phoneNumbers?: smsNotificationUncheckedUpdateManyWithoutPhoneNumberNestedInput
    users?: userUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type attendanceCreateWithoutEmployeeInput = {
    date: string
    time_in: string
    time_out?: string | null
    attendance_id: string
    hours?: number | null
  }

  export type attendanceUncheckedCreateWithoutEmployeeInput = {
    id?: number
    date: string
    time_in: string
    time_out?: string | null
    attendance_id: string
    hours?: number | null
  }

  export type attendanceCreateOrConnectWithoutEmployeeInput = {
    where: attendanceWhereUniqueInput
    create: XOR<attendanceCreateWithoutEmployeeInput, attendanceUncheckedCreateWithoutEmployeeInput>
  }

  export type attendanceCreateManyEmployeeInputEnvelope = {
    data: attendanceCreateManyEmployeeInput | attendanceCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type leaveRequestCreateWithoutEmployeeInput = {
    leave_type: string
    reason: string
    days_requested: number
    department: string
    distribution_copy: JsonNullValueInput | InputJsonValue
    email: string
    inclusive_dates: Date | string
    name: string
    person_to_takeover: string
    position: string
    requested_by: string
    supporting_document?: string | null
    approved_by?: string | null
    received_by?: string | null
    department_head?: string | null
    hr_department?: string | null
    date_of_approve?: Date | string | null
    date_of_received?: Date | string | null
    recorded_by?: string | null
    withpay?: boolean | null
    to_date: Date | string
    created_at?: Date | string
    status?: $Enums.LeaveRequestStatus
  }

  export type leaveRequestUncheckedCreateWithoutEmployeeInput = {
    id?: number
    leave_type: string
    reason: string
    days_requested: number
    department: string
    distribution_copy: JsonNullValueInput | InputJsonValue
    email: string
    inclusive_dates: Date | string
    name: string
    person_to_takeover: string
    position: string
    requested_by: string
    supporting_document?: string | null
    approved_by?: string | null
    received_by?: string | null
    department_head?: string | null
    hr_department?: string | null
    date_of_approve?: Date | string | null
    date_of_received?: Date | string | null
    recorded_by?: string | null
    withpay?: boolean | null
    to_date: Date | string
    created_at?: Date | string
    status?: $Enums.LeaveRequestStatus
  }

  export type leaveRequestCreateOrConnectWithoutEmployeeInput = {
    where: leaveRequestWhereUniqueInput
    create: XOR<leaveRequestCreateWithoutEmployeeInput, leaveRequestUncheckedCreateWithoutEmployeeInput>
  }

  export type leaveRequestCreateManyEmployeeInputEnvelope = {
    data: leaveRequestCreateManyEmployeeInput | leaveRequestCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type payrollCreateWithoutEmployeeInput = {
    payroll_id?: string | null
    hours_worked: number
    total_pay: number
    created_at?: Date | string
    period_start?: Date | string | null
    period_end?: Date | string | null
    absent?: number
  }

  export type payrollUncheckedCreateWithoutEmployeeInput = {
    id?: number
    payroll_id?: string | null
    hours_worked: number
    total_pay: number
    created_at?: Date | string
    period_start?: Date | string | null
    period_end?: Date | string | null
    absent?: number
  }

  export type payrollCreateOrConnectWithoutEmployeeInput = {
    where: payrollWhereUniqueInput
    create: XOR<payrollCreateWithoutEmployeeInput, payrollUncheckedCreateWithoutEmployeeInput>
  }

  export type payrollCreateManyEmployeeInputEnvelope = {
    data: payrollCreateManyEmployeeInput | payrollCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type smsNotificationCreateWithoutEmployeeInput = {
    notification_id: string
    message: string
    sent_date?: Date | string
    phoneNumber: employeesCreateNestedOneWithoutPhoneNumbersInput
  }

  export type smsNotificationUncheckedCreateWithoutEmployeeInput = {
    id?: number
    notification_id: string
    phone_number: string
    message: string
    sent_date?: Date | string
  }

  export type smsNotificationCreateOrConnectWithoutEmployeeInput = {
    where: smsNotificationWhereUniqueInput
    create: XOR<smsNotificationCreateWithoutEmployeeInput, smsNotificationUncheckedCreateWithoutEmployeeInput>
  }

  export type smsNotificationCreateManyEmployeeInputEnvelope = {
    data: smsNotificationCreateManyEmployeeInput | smsNotificationCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type smsNotificationCreateWithoutPhoneNumberInput = {
    notification_id: string
    message: string
    sent_date?: Date | string
    employee: employeesCreateNestedOneWithoutSmsNotificationsInput
  }

  export type smsNotificationUncheckedCreateWithoutPhoneNumberInput = {
    id?: number
    notification_id: string
    employee_id: string
    message: string
    sent_date?: Date | string
  }

  export type smsNotificationCreateOrConnectWithoutPhoneNumberInput = {
    where: smsNotificationWhereUniqueInput
    create: XOR<smsNotificationCreateWithoutPhoneNumberInput, smsNotificationUncheckedCreateWithoutPhoneNumberInput>
  }

  export type smsNotificationCreateManyPhoneNumberInputEnvelope = {
    data: smsNotificationCreateManyPhoneNumberInput | smsNotificationCreateManyPhoneNumberInput[]
    skipDuplicates?: boolean
  }

  export type userCreateWithoutEmployeeInput = {
    user_id: string
    email: string
    password: string
  }

  export type userUncheckedCreateWithoutEmployeeInput = {
    id?: number
    user_id: string
    email: string
    password: string
  }

  export type userCreateOrConnectWithoutEmployeeInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutEmployeeInput, userUncheckedCreateWithoutEmployeeInput>
  }

  export type userCreateManyEmployeeInputEnvelope = {
    data: userCreateManyEmployeeInput | userCreateManyEmployeeInput[]
    skipDuplicates?: boolean
  }

  export type attendanceUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: attendanceWhereUniqueInput
    update: XOR<attendanceUpdateWithoutEmployeeInput, attendanceUncheckedUpdateWithoutEmployeeInput>
    create: XOR<attendanceCreateWithoutEmployeeInput, attendanceUncheckedCreateWithoutEmployeeInput>
  }

  export type attendanceUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: attendanceWhereUniqueInput
    data: XOR<attendanceUpdateWithoutEmployeeInput, attendanceUncheckedUpdateWithoutEmployeeInput>
  }

  export type attendanceUpdateManyWithWhereWithoutEmployeeInput = {
    where: attendanceScalarWhereInput
    data: XOR<attendanceUpdateManyMutationInput, attendanceUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type attendanceScalarWhereInput = {
    AND?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
    OR?: attendanceScalarWhereInput[]
    NOT?: attendanceScalarWhereInput | attendanceScalarWhereInput[]
    id?: IntFilter<"attendance"> | number
    date?: StringFilter<"attendance"> | string
    time_in?: StringFilter<"attendance"> | string
    time_out?: StringNullableFilter<"attendance"> | string | null
    attendance_id?: StringFilter<"attendance"> | string
    employee_id?: StringFilter<"attendance"> | string
    hours?: IntNullableFilter<"attendance"> | number | null
  }

  export type leaveRequestUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: leaveRequestWhereUniqueInput
    update: XOR<leaveRequestUpdateWithoutEmployeeInput, leaveRequestUncheckedUpdateWithoutEmployeeInput>
    create: XOR<leaveRequestCreateWithoutEmployeeInput, leaveRequestUncheckedCreateWithoutEmployeeInput>
  }

  export type leaveRequestUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: leaveRequestWhereUniqueInput
    data: XOR<leaveRequestUpdateWithoutEmployeeInput, leaveRequestUncheckedUpdateWithoutEmployeeInput>
  }

  export type leaveRequestUpdateManyWithWhereWithoutEmployeeInput = {
    where: leaveRequestScalarWhereInput
    data: XOR<leaveRequestUpdateManyMutationInput, leaveRequestUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type leaveRequestScalarWhereInput = {
    AND?: leaveRequestScalarWhereInput | leaveRequestScalarWhereInput[]
    OR?: leaveRequestScalarWhereInput[]
    NOT?: leaveRequestScalarWhereInput | leaveRequestScalarWhereInput[]
    id?: IntFilter<"leaveRequest"> | number
    employee_id?: StringNullableFilter<"leaveRequest"> | string | null
    leave_type?: StringFilter<"leaveRequest"> | string
    reason?: StringFilter<"leaveRequest"> | string
    days_requested?: IntFilter<"leaveRequest"> | number
    department?: StringFilter<"leaveRequest"> | string
    distribution_copy?: JsonFilter<"leaveRequest">
    email?: StringFilter<"leaveRequest"> | string
    inclusive_dates?: DateTimeFilter<"leaveRequest"> | Date | string
    name?: StringFilter<"leaveRequest"> | string
    person_to_takeover?: StringFilter<"leaveRequest"> | string
    position?: StringFilter<"leaveRequest"> | string
    requested_by?: StringFilter<"leaveRequest"> | string
    supporting_document?: StringNullableFilter<"leaveRequest"> | string | null
    approved_by?: StringNullableFilter<"leaveRequest"> | string | null
    received_by?: StringNullableFilter<"leaveRequest"> | string | null
    department_head?: StringNullableFilter<"leaveRequest"> | string | null
    hr_department?: StringNullableFilter<"leaveRequest"> | string | null
    date_of_approve?: DateTimeNullableFilter<"leaveRequest"> | Date | string | null
    date_of_received?: DateTimeNullableFilter<"leaveRequest"> | Date | string | null
    recorded_by?: StringNullableFilter<"leaveRequest"> | string | null
    withpay?: BoolNullableFilter<"leaveRequest"> | boolean | null
    to_date?: DateTimeFilter<"leaveRequest"> | Date | string
    created_at?: DateTimeFilter<"leaveRequest"> | Date | string
    status?: EnumLeaveRequestStatusFilter<"leaveRequest"> | $Enums.LeaveRequestStatus
  }

  export type payrollUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: payrollWhereUniqueInput
    update: XOR<payrollUpdateWithoutEmployeeInput, payrollUncheckedUpdateWithoutEmployeeInput>
    create: XOR<payrollCreateWithoutEmployeeInput, payrollUncheckedCreateWithoutEmployeeInput>
  }

  export type payrollUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: payrollWhereUniqueInput
    data: XOR<payrollUpdateWithoutEmployeeInput, payrollUncheckedUpdateWithoutEmployeeInput>
  }

  export type payrollUpdateManyWithWhereWithoutEmployeeInput = {
    where: payrollScalarWhereInput
    data: XOR<payrollUpdateManyMutationInput, payrollUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type payrollScalarWhereInput = {
    AND?: payrollScalarWhereInput | payrollScalarWhereInput[]
    OR?: payrollScalarWhereInput[]
    NOT?: payrollScalarWhereInput | payrollScalarWhereInput[]
    id?: IntFilter<"payroll"> | number
    payroll_id?: StringNullableFilter<"payroll"> | string | null
    employee_id?: StringFilter<"payroll"> | string
    hours_worked?: FloatFilter<"payroll"> | number
    total_pay?: FloatFilter<"payroll"> | number
    created_at?: DateTimeFilter<"payroll"> | Date | string
    period_start?: DateTimeNullableFilter<"payroll"> | Date | string | null
    period_end?: DateTimeNullableFilter<"payroll"> | Date | string | null
    absent?: IntFilter<"payroll"> | number
  }

  export type smsNotificationUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: smsNotificationWhereUniqueInput
    update: XOR<smsNotificationUpdateWithoutEmployeeInput, smsNotificationUncheckedUpdateWithoutEmployeeInput>
    create: XOR<smsNotificationCreateWithoutEmployeeInput, smsNotificationUncheckedCreateWithoutEmployeeInput>
  }

  export type smsNotificationUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: smsNotificationWhereUniqueInput
    data: XOR<smsNotificationUpdateWithoutEmployeeInput, smsNotificationUncheckedUpdateWithoutEmployeeInput>
  }

  export type smsNotificationUpdateManyWithWhereWithoutEmployeeInput = {
    where: smsNotificationScalarWhereInput
    data: XOR<smsNotificationUpdateManyMutationInput, smsNotificationUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type smsNotificationScalarWhereInput = {
    AND?: smsNotificationScalarWhereInput | smsNotificationScalarWhereInput[]
    OR?: smsNotificationScalarWhereInput[]
    NOT?: smsNotificationScalarWhereInput | smsNotificationScalarWhereInput[]
    id?: IntFilter<"smsNotification"> | number
    notification_id?: StringFilter<"smsNotification"> | string
    employee_id?: StringFilter<"smsNotification"> | string
    phone_number?: StringFilter<"smsNotification"> | string
    message?: StringFilter<"smsNotification"> | string
    sent_date?: DateTimeFilter<"smsNotification"> | Date | string
  }

  export type smsNotificationUpsertWithWhereUniqueWithoutPhoneNumberInput = {
    where: smsNotificationWhereUniqueInput
    update: XOR<smsNotificationUpdateWithoutPhoneNumberInput, smsNotificationUncheckedUpdateWithoutPhoneNumberInput>
    create: XOR<smsNotificationCreateWithoutPhoneNumberInput, smsNotificationUncheckedCreateWithoutPhoneNumberInput>
  }

  export type smsNotificationUpdateWithWhereUniqueWithoutPhoneNumberInput = {
    where: smsNotificationWhereUniqueInput
    data: XOR<smsNotificationUpdateWithoutPhoneNumberInput, smsNotificationUncheckedUpdateWithoutPhoneNumberInput>
  }

  export type smsNotificationUpdateManyWithWhereWithoutPhoneNumberInput = {
    where: smsNotificationScalarWhereInput
    data: XOR<smsNotificationUpdateManyMutationInput, smsNotificationUncheckedUpdateManyWithoutPhoneNumberInput>
  }

  export type userUpsertWithWhereUniqueWithoutEmployeeInput = {
    where: userWhereUniqueInput
    update: XOR<userUpdateWithoutEmployeeInput, userUncheckedUpdateWithoutEmployeeInput>
    create: XOR<userCreateWithoutEmployeeInput, userUncheckedCreateWithoutEmployeeInput>
  }

  export type userUpdateWithWhereUniqueWithoutEmployeeInput = {
    where: userWhereUniqueInput
    data: XOR<userUpdateWithoutEmployeeInput, userUncheckedUpdateWithoutEmployeeInput>
  }

  export type userUpdateManyWithWhereWithoutEmployeeInput = {
    where: userScalarWhereInput
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyWithoutEmployeeInput>
  }

  export type userScalarWhereInput = {
    AND?: userScalarWhereInput | userScalarWhereInput[]
    OR?: userScalarWhereInput[]
    NOT?: userScalarWhereInput | userScalarWhereInput[]
    id?: IntFilter<"user"> | number
    user_id?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    employee_id?: StringNullableFilter<"user"> | string | null
  }

  export type employeesCreateWithoutLeaveRequestsInput = {
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    attendance?: attendanceCreateNestedManyWithoutEmployeeInput
    payrolls?: payrollCreateNestedManyWithoutEmployeeInput
    smsNotifications?: smsNotificationCreateNestedManyWithoutEmployeeInput
    phoneNumbers?: smsNotificationCreateNestedManyWithoutPhoneNumberInput
    users?: userCreateNestedManyWithoutEmployeeInput
  }

  export type employeesUncheckedCreateWithoutLeaveRequestsInput = {
    id?: number
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    attendance?: attendanceUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: payrollUncheckedCreateNestedManyWithoutEmployeeInput
    smsNotifications?: smsNotificationUncheckedCreateNestedManyWithoutEmployeeInput
    phoneNumbers?: smsNotificationUncheckedCreateNestedManyWithoutPhoneNumberInput
    users?: userUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type employeesCreateOrConnectWithoutLeaveRequestsInput = {
    where: employeesWhereUniqueInput
    create: XOR<employeesCreateWithoutLeaveRequestsInput, employeesUncheckedCreateWithoutLeaveRequestsInput>
  }

  export type employeesUpsertWithoutLeaveRequestsInput = {
    update: XOR<employeesUpdateWithoutLeaveRequestsInput, employeesUncheckedUpdateWithoutLeaveRequestsInput>
    create: XOR<employeesCreateWithoutLeaveRequestsInput, employeesUncheckedCreateWithoutLeaveRequestsInput>
    where?: employeesWhereInput
  }

  export type employeesUpdateToOneWithWhereWithoutLeaveRequestsInput = {
    where?: employeesWhereInput
    data: XOR<employeesUpdateWithoutLeaveRequestsInput, employeesUncheckedUpdateWithoutLeaveRequestsInput>
  }

  export type employeesUpdateWithoutLeaveRequestsInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    attendance?: attendanceUpdateManyWithoutEmployeeNestedInput
    payrolls?: payrollUpdateManyWithoutEmployeeNestedInput
    smsNotifications?: smsNotificationUpdateManyWithoutEmployeeNestedInput
    phoneNumbers?: smsNotificationUpdateManyWithoutPhoneNumberNestedInput
    users?: userUpdateManyWithoutEmployeeNestedInput
  }

  export type employeesUncheckedUpdateWithoutLeaveRequestsInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    attendance?: attendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: payrollUncheckedUpdateManyWithoutEmployeeNestedInput
    smsNotifications?: smsNotificationUncheckedUpdateManyWithoutEmployeeNestedInput
    phoneNumbers?: smsNotificationUncheckedUpdateManyWithoutPhoneNumberNestedInput
    users?: userUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type employeesCreateWithoutPayrollsInput = {
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    attendance?: attendanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: leaveRequestCreateNestedManyWithoutEmployeeInput
    smsNotifications?: smsNotificationCreateNestedManyWithoutEmployeeInput
    phoneNumbers?: smsNotificationCreateNestedManyWithoutPhoneNumberInput
    users?: userCreateNestedManyWithoutEmployeeInput
  }

  export type employeesUncheckedCreateWithoutPayrollsInput = {
    id?: number
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    attendance?: attendanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: leaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    smsNotifications?: smsNotificationUncheckedCreateNestedManyWithoutEmployeeInput
    phoneNumbers?: smsNotificationUncheckedCreateNestedManyWithoutPhoneNumberInput
    users?: userUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type employeesCreateOrConnectWithoutPayrollsInput = {
    where: employeesWhereUniqueInput
    create: XOR<employeesCreateWithoutPayrollsInput, employeesUncheckedCreateWithoutPayrollsInput>
  }

  export type employeesUpsertWithoutPayrollsInput = {
    update: XOR<employeesUpdateWithoutPayrollsInput, employeesUncheckedUpdateWithoutPayrollsInput>
    create: XOR<employeesCreateWithoutPayrollsInput, employeesUncheckedCreateWithoutPayrollsInput>
    where?: employeesWhereInput
  }

  export type employeesUpdateToOneWithWhereWithoutPayrollsInput = {
    where?: employeesWhereInput
    data: XOR<employeesUpdateWithoutPayrollsInput, employeesUncheckedUpdateWithoutPayrollsInput>
  }

  export type employeesUpdateWithoutPayrollsInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    attendance?: attendanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: leaveRequestUpdateManyWithoutEmployeeNestedInput
    smsNotifications?: smsNotificationUpdateManyWithoutEmployeeNestedInput
    phoneNumbers?: smsNotificationUpdateManyWithoutPhoneNumberNestedInput
    users?: userUpdateManyWithoutEmployeeNestedInput
  }

  export type employeesUncheckedUpdateWithoutPayrollsInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    attendance?: attendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: leaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    smsNotifications?: smsNotificationUncheckedUpdateManyWithoutEmployeeNestedInput
    phoneNumbers?: smsNotificationUncheckedUpdateManyWithoutPhoneNumberNestedInput
    users?: userUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type employeesCreateWithoutSmsNotificationsInput = {
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    attendance?: attendanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: leaveRequestCreateNestedManyWithoutEmployeeInput
    payrolls?: payrollCreateNestedManyWithoutEmployeeInput
    phoneNumbers?: smsNotificationCreateNestedManyWithoutPhoneNumberInput
    users?: userCreateNestedManyWithoutEmployeeInput
  }

  export type employeesUncheckedCreateWithoutSmsNotificationsInput = {
    id?: number
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    attendance?: attendanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: leaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: payrollUncheckedCreateNestedManyWithoutEmployeeInput
    phoneNumbers?: smsNotificationUncheckedCreateNestedManyWithoutPhoneNumberInput
    users?: userUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type employeesCreateOrConnectWithoutSmsNotificationsInput = {
    where: employeesWhereUniqueInput
    create: XOR<employeesCreateWithoutSmsNotificationsInput, employeesUncheckedCreateWithoutSmsNotificationsInput>
  }

  export type employeesCreateWithoutPhoneNumbersInput = {
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    attendance?: attendanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: leaveRequestCreateNestedManyWithoutEmployeeInput
    payrolls?: payrollCreateNestedManyWithoutEmployeeInput
    smsNotifications?: smsNotificationCreateNestedManyWithoutEmployeeInput
    users?: userCreateNestedManyWithoutEmployeeInput
  }

  export type employeesUncheckedCreateWithoutPhoneNumbersInput = {
    id?: number
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    attendance?: attendanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: leaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: payrollUncheckedCreateNestedManyWithoutEmployeeInput
    smsNotifications?: smsNotificationUncheckedCreateNestedManyWithoutEmployeeInput
    users?: userUncheckedCreateNestedManyWithoutEmployeeInput
  }

  export type employeesCreateOrConnectWithoutPhoneNumbersInput = {
    where: employeesWhereUniqueInput
    create: XOR<employeesCreateWithoutPhoneNumbersInput, employeesUncheckedCreateWithoutPhoneNumbersInput>
  }

  export type employeesUpsertWithoutSmsNotificationsInput = {
    update: XOR<employeesUpdateWithoutSmsNotificationsInput, employeesUncheckedUpdateWithoutSmsNotificationsInput>
    create: XOR<employeesCreateWithoutSmsNotificationsInput, employeesUncheckedCreateWithoutSmsNotificationsInput>
    where?: employeesWhereInput
  }

  export type employeesUpdateToOneWithWhereWithoutSmsNotificationsInput = {
    where?: employeesWhereInput
    data: XOR<employeesUpdateWithoutSmsNotificationsInput, employeesUncheckedUpdateWithoutSmsNotificationsInput>
  }

  export type employeesUpdateWithoutSmsNotificationsInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    attendance?: attendanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: leaveRequestUpdateManyWithoutEmployeeNestedInput
    payrolls?: payrollUpdateManyWithoutEmployeeNestedInput
    phoneNumbers?: smsNotificationUpdateManyWithoutPhoneNumberNestedInput
    users?: userUpdateManyWithoutEmployeeNestedInput
  }

  export type employeesUncheckedUpdateWithoutSmsNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    attendance?: attendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: leaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: payrollUncheckedUpdateManyWithoutEmployeeNestedInput
    phoneNumbers?: smsNotificationUncheckedUpdateManyWithoutPhoneNumberNestedInput
    users?: userUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type employeesUpsertWithoutPhoneNumbersInput = {
    update: XOR<employeesUpdateWithoutPhoneNumbersInput, employeesUncheckedUpdateWithoutPhoneNumbersInput>
    create: XOR<employeesCreateWithoutPhoneNumbersInput, employeesUncheckedCreateWithoutPhoneNumbersInput>
    where?: employeesWhereInput
  }

  export type employeesUpdateToOneWithWhereWithoutPhoneNumbersInput = {
    where?: employeesWhereInput
    data: XOR<employeesUpdateWithoutPhoneNumbersInput, employeesUncheckedUpdateWithoutPhoneNumbersInput>
  }

  export type employeesUpdateWithoutPhoneNumbersInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    attendance?: attendanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: leaveRequestUpdateManyWithoutEmployeeNestedInput
    payrolls?: payrollUpdateManyWithoutEmployeeNestedInput
    smsNotifications?: smsNotificationUpdateManyWithoutEmployeeNestedInput
    users?: userUpdateManyWithoutEmployeeNestedInput
  }

  export type employeesUncheckedUpdateWithoutPhoneNumbersInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    attendance?: attendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: leaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: payrollUncheckedUpdateManyWithoutEmployeeNestedInput
    smsNotifications?: smsNotificationUncheckedUpdateManyWithoutEmployeeNestedInput
    users?: userUncheckedUpdateManyWithoutEmployeeNestedInput
  }

  export type employeesCreateWithoutUsersInput = {
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    attendance?: attendanceCreateNestedManyWithoutEmployeeInput
    leaveRequests?: leaveRequestCreateNestedManyWithoutEmployeeInput
    payrolls?: payrollCreateNestedManyWithoutEmployeeInput
    smsNotifications?: smsNotificationCreateNestedManyWithoutEmployeeInput
    phoneNumbers?: smsNotificationCreateNestedManyWithoutPhoneNumberInput
  }

  export type employeesUncheckedCreateWithoutUsersInput = {
    id?: number
    employee_id: string
    name: string
    created_at?: Date | string
    department: string
    position: string
    qrcode: string
    avatar?: string | null
    email: string
    phone_number: string
    basicSalary?: number
    totalSalary?: number
    monthSalary?: number
    password: string
    hierarchy?: string
    day_off?: boolean | null
    leaveCredits?: number
    attendance?: attendanceUncheckedCreateNestedManyWithoutEmployeeInput
    leaveRequests?: leaveRequestUncheckedCreateNestedManyWithoutEmployeeInput
    payrolls?: payrollUncheckedCreateNestedManyWithoutEmployeeInput
    smsNotifications?: smsNotificationUncheckedCreateNestedManyWithoutEmployeeInput
    phoneNumbers?: smsNotificationUncheckedCreateNestedManyWithoutPhoneNumberInput
  }

  export type employeesCreateOrConnectWithoutUsersInput = {
    where: employeesWhereUniqueInput
    create: XOR<employeesCreateWithoutUsersInput, employeesUncheckedCreateWithoutUsersInput>
  }

  export type employeesUpsertWithoutUsersInput = {
    update: XOR<employeesUpdateWithoutUsersInput, employeesUncheckedUpdateWithoutUsersInput>
    create: XOR<employeesCreateWithoutUsersInput, employeesUncheckedCreateWithoutUsersInput>
    where?: employeesWhereInput
  }

  export type employeesUpdateToOneWithWhereWithoutUsersInput = {
    where?: employeesWhereInput
    data: XOR<employeesUpdateWithoutUsersInput, employeesUncheckedUpdateWithoutUsersInput>
  }

  export type employeesUpdateWithoutUsersInput = {
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    attendance?: attendanceUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: leaveRequestUpdateManyWithoutEmployeeNestedInput
    payrolls?: payrollUpdateManyWithoutEmployeeNestedInput
    smsNotifications?: smsNotificationUpdateManyWithoutEmployeeNestedInput
    phoneNumbers?: smsNotificationUpdateManyWithoutPhoneNumberNestedInput
  }

  export type employeesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    qrcode?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    basicSalary?: IntFieldUpdateOperationsInput | number
    totalSalary?: IntFieldUpdateOperationsInput | number
    monthSalary?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    hierarchy?: StringFieldUpdateOperationsInput | string
    day_off?: NullableBoolFieldUpdateOperationsInput | boolean | null
    leaveCredits?: IntFieldUpdateOperationsInput | number
    attendance?: attendanceUncheckedUpdateManyWithoutEmployeeNestedInput
    leaveRequests?: leaveRequestUncheckedUpdateManyWithoutEmployeeNestedInput
    payrolls?: payrollUncheckedUpdateManyWithoutEmployeeNestedInput
    smsNotifications?: smsNotificationUncheckedUpdateManyWithoutEmployeeNestedInput
    phoneNumbers?: smsNotificationUncheckedUpdateManyWithoutPhoneNumberNestedInput
  }

  export type attendanceCreateManyEmployeeInput = {
    id?: number
    date: string
    time_in: string
    time_out?: string | null
    attendance_id: string
    hours?: number | null
  }

  export type leaveRequestCreateManyEmployeeInput = {
    id?: number
    leave_type: string
    reason: string
    days_requested: number
    department: string
    distribution_copy: JsonNullValueInput | InputJsonValue
    email: string
    inclusive_dates: Date | string
    name: string
    person_to_takeover: string
    position: string
    requested_by: string
    supporting_document?: string | null
    approved_by?: string | null
    received_by?: string | null
    department_head?: string | null
    hr_department?: string | null
    date_of_approve?: Date | string | null
    date_of_received?: Date | string | null
    recorded_by?: string | null
    withpay?: boolean | null
    to_date: Date | string
    created_at?: Date | string
    status?: $Enums.LeaveRequestStatus
  }

  export type payrollCreateManyEmployeeInput = {
    id?: number
    payroll_id?: string | null
    hours_worked: number
    total_pay: number
    created_at?: Date | string
    period_start?: Date | string | null
    period_end?: Date | string | null
    absent?: number
  }

  export type smsNotificationCreateManyEmployeeInput = {
    id?: number
    notification_id: string
    phone_number: string
    message: string
    sent_date?: Date | string
  }

  export type smsNotificationCreateManyPhoneNumberInput = {
    id?: number
    notification_id: string
    employee_id: string
    message: string
    sent_date?: Date | string
  }

  export type userCreateManyEmployeeInput = {
    id?: number
    user_id: string
    email: string
    password: string
  }

  export type attendanceUpdateWithoutEmployeeInput = {
    date?: StringFieldUpdateOperationsInput | string
    time_in?: StringFieldUpdateOperationsInput | string
    time_out?: NullableStringFieldUpdateOperationsInput | string | null
    attendance_id?: StringFieldUpdateOperationsInput | string
    hours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type attendanceUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    time_in?: StringFieldUpdateOperationsInput | string
    time_out?: NullableStringFieldUpdateOperationsInput | string | null
    attendance_id?: StringFieldUpdateOperationsInput | string
    hours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type attendanceUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    time_in?: StringFieldUpdateOperationsInput | string
    time_out?: NullableStringFieldUpdateOperationsInput | string | null
    attendance_id?: StringFieldUpdateOperationsInput | string
    hours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type leaveRequestUpdateWithoutEmployeeInput = {
    leave_type?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    days_requested?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    distribution_copy?: JsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    inclusive_dates?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    person_to_takeover?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    requested_by?: StringFieldUpdateOperationsInput | string
    supporting_document?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    received_by?: NullableStringFieldUpdateOperationsInput | string | null
    department_head?: NullableStringFieldUpdateOperationsInput | string | null
    hr_department?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_approve?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_received?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recorded_by?: NullableStringFieldUpdateOperationsInput | string | null
    withpay?: NullableBoolFieldUpdateOperationsInput | boolean | null
    to_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumLeaveRequestStatusFieldUpdateOperationsInput | $Enums.LeaveRequestStatus
  }

  export type leaveRequestUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    leave_type?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    days_requested?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    distribution_copy?: JsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    inclusive_dates?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    person_to_takeover?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    requested_by?: StringFieldUpdateOperationsInput | string
    supporting_document?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    received_by?: NullableStringFieldUpdateOperationsInput | string | null
    department_head?: NullableStringFieldUpdateOperationsInput | string | null
    hr_department?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_approve?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_received?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recorded_by?: NullableStringFieldUpdateOperationsInput | string | null
    withpay?: NullableBoolFieldUpdateOperationsInput | boolean | null
    to_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumLeaveRequestStatusFieldUpdateOperationsInput | $Enums.LeaveRequestStatus
  }

  export type leaveRequestUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    leave_type?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    days_requested?: IntFieldUpdateOperationsInput | number
    department?: StringFieldUpdateOperationsInput | string
    distribution_copy?: JsonNullValueInput | InputJsonValue
    email?: StringFieldUpdateOperationsInput | string
    inclusive_dates?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    person_to_takeover?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    requested_by?: StringFieldUpdateOperationsInput | string
    supporting_document?: NullableStringFieldUpdateOperationsInput | string | null
    approved_by?: NullableStringFieldUpdateOperationsInput | string | null
    received_by?: NullableStringFieldUpdateOperationsInput | string | null
    department_head?: NullableStringFieldUpdateOperationsInput | string | null
    hr_department?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_approve?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    date_of_received?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    recorded_by?: NullableStringFieldUpdateOperationsInput | string | null
    withpay?: NullableBoolFieldUpdateOperationsInput | boolean | null
    to_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumLeaveRequestStatusFieldUpdateOperationsInput | $Enums.LeaveRequestStatus
  }

  export type payrollUpdateWithoutEmployeeInput = {
    payroll_id?: NullableStringFieldUpdateOperationsInput | string | null
    hours_worked?: FloatFieldUpdateOperationsInput | number
    total_pay?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    period_start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    period_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    absent?: IntFieldUpdateOperationsInput | number
  }

  export type payrollUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    payroll_id?: NullableStringFieldUpdateOperationsInput | string | null
    hours_worked?: FloatFieldUpdateOperationsInput | number
    total_pay?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    period_start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    period_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    absent?: IntFieldUpdateOperationsInput | number
  }

  export type payrollUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    payroll_id?: NullableStringFieldUpdateOperationsInput | string | null
    hours_worked?: FloatFieldUpdateOperationsInput | number
    total_pay?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    period_start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    period_end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    absent?: IntFieldUpdateOperationsInput | number
  }

  export type smsNotificationUpdateWithoutEmployeeInput = {
    notification_id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sent_date?: DateTimeFieldUpdateOperationsInput | Date | string
    phoneNumber?: employeesUpdateOneRequiredWithoutPhoneNumbersNestedInput
  }

  export type smsNotificationUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    notification_id?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sent_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type smsNotificationUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    notification_id?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sent_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type smsNotificationUpdateWithoutPhoneNumberInput = {
    notification_id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sent_date?: DateTimeFieldUpdateOperationsInput | Date | string
    employee?: employeesUpdateOneRequiredWithoutSmsNotificationsNestedInput
  }

  export type smsNotificationUncheckedUpdateWithoutPhoneNumberInput = {
    id?: IntFieldUpdateOperationsInput | number
    notification_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sent_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type smsNotificationUncheckedUpdateManyWithoutPhoneNumberInput = {
    id?: IntFieldUpdateOperationsInput | number
    notification_id?: StringFieldUpdateOperationsInput | string
    employee_id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    sent_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUpdateWithoutEmployeeInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type userUncheckedUpdateManyWithoutEmployeeInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use EmployeesCountOutputTypeDefaultArgs instead
     */
    export type EmployeesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmployeesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use adminDefaultArgs instead
     */
    export type adminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = adminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use attendanceDefaultArgs instead
     */
    export type attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = attendanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use employeesDefaultArgs instead
     */
    export type employeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = employeesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use leaveRequestDefaultArgs instead
     */
    export type leaveRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = leaveRequestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use payrollDefaultArgs instead
     */
    export type payrollArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = payrollDefaultArgs<ExtArgs>
    /**
     * @deprecated Use smsNotificationDefaultArgs instead
     */
    export type smsNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = smsNotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use employeeRequestDefaultArgs instead
     */
    export type employeeRequestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = employeeRequestDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}